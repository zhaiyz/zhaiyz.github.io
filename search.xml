<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Kotlin中的Raw String</title>
    <url>/2018/08/12/Kotlin%E4%B8%AD%E7%9A%84Raw-String/</url>
    <content><![CDATA[<p>在Kotlin中可以使用三个<code>&quot;</code>开始，三个<code>&quot;</code>结束来定义一个<em>Raw String</em>，如果要定义的字符串中包含需要进行转义的字符时，使用<em>Raw String</em>比<em>String</em>要方便一些。</p>
<p>比如需要定义一个字符串，来保存<code>{&quot;gender&quot;:&quot;男&quot;,&quot;name&quot;:&quot;zhaiyz&quot;}</code>，如果使用基本的字符串定义需要：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val stringJson &#x3D; &quot;&#123;\&quot;gender\&quot;:\&quot;男\&quot;,\&quot;name\&quot;:\&quot;zhaiyz\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure>
<p>字符串中的<code>&quot;</code>需要使用<code>\&quot;</code>进行转义，如果使用<code>Raw String</code>的方式进行定义需要：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val rawStringJson &#x3D; &quot;&quot;&quot;&#123;&quot;gender&quot;:&quot;男&quot;,&quot;name&quot;:&quot;zhaiyz&quot;&#125;&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<p>字符串中的<code>&quot;</code>不需要再进行处理，以上两种方式的结果是等价的，但是明显使用<code>Raw String</code>的更加方便且可读性高。</p>
<a id="more"></a>

<p>编程中还会经常遇到定义一个包含换行的字符串，使用基本的字符串字符需要：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val stringNewline &#x3D; &quot;Hi,\nzhaiyz!&quot;</span><br></pre></td></tr></table></figure>
<p>使用<code>Raw String</code>的方式进行定义需要：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val rawStringNewline &#x3D; &quot;&quot;&quot;Hi,</span><br><span class="line">zhaiyz!&quot;&quot;</span><br></pre></td></tr></table></figure>
<p>在Raw String中，换行符直接表现在字符串中的。此例过于简单，所以没能体现出<code>Raw String</code>的更好的可读性。<br>可以使用以下方法，定义出可读性更高的多行字符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val rawStringNewlinePretty &#x3D; &quot;&quot;&quot;</span><br><span class="line">    Hi,</span><br><span class="line">    zhaiyz!</span><br><span class="line">&quot;&quot;&quot;.trimIndent()</span><br></pre></td></tr></table></figure>
<p>其中<code>trimIndent()</code>方法可以把首行和尾行的空行以及每行前面的空白字符删除。最终得到的字符串与上面的等价。这样可读性就高了很多。</p>
<p>以下为代码示例：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> stringJson = <span class="string">"&#123;\"gender\":\"男\",\"name\":\"zhaiyz\"&#125;"</span></span><br><span class="line">    <span class="keyword">val</span> rawStringJson = <span class="string">"""&#123;"gender":"男","name":"zhaiyz"&#125;"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    val stringNewline = "Hi,\nzhaiyz!"</span></span><br><span class="line"><span class="string">    val rawStringNewline = """</span>Hi,</span><br><span class="line">zhaiyz!<span class="string">"""</span></span><br><span class="line"><span class="string">    val rawStringNewlinePretty = """</span></span><br><span class="line"><span class="string">        Hi,</span></span><br><span class="line"><span class="string">        zhaiyz!</span></span><br><span class="line"><span class="string">    """</span>.trimIndent()</span><br><span class="line"></span><br><span class="line">    println(stringJson == rawStringJson)</span><br><span class="line">    println(stringNewline == rawStringNewline)</span><br><span class="line">    println(stringNewline == rawStringNewlinePretty)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br></pre></td></tr></table></figure>
<p>输出结果都为<code>true</code>，可见几种定义方式得到的结果是一样的。</p>
<p>以上只是以字符串中包含<code>&quot;</code>和换行来举例说明<code>Raw String</code>的使用，像文章开始所说<code>Raw String</code>是可以用在使用基本<code>String</code>定义，需要进行一些转义操作时，让字符串的定义更方便，可读性更高。</p>
]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin中类的Property</title>
    <url>/2018/08/07/Kotlin%E4%B8%AD%E7%B1%BB%E7%9A%84Property/</url>
    <content><![CDATA[<p>开发中经常需要定义一些POJO，里面只有基本字段及对应的setter/getter方法。比如以下代码是使用Java定义一个包含姓名、生日两个字段的类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果使用Kotlin定义相同功能的类只需要以下代码：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> birthday: Date? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出Kotlin定义简洁了很多。<br>在Java中<code>name</code>、<code>birthday</code>叫作<code>field</code>，而在Kotlin中叫作<code>property</code>。使用<code>var</code>定义的<code>property</code>直接可以通过变量名进行赋值和取值。以下代码可以初始化一个User对象：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> user = User()</span><br><span class="line">    user.name = <span class="string">"zhaiyz"</span></span><br><span class="line"></span><br><span class="line">    println(<span class="string">"User: name = <span class="subst">$&#123;user.name&#125;</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User: name &#x3D; zhaiyz</span><br></pre></td></tr></table></figure>
<p>可以看出来，使用起来很方便。</p>
<a id="more"></a>

<p>当一个property在赋值或取值需要进行一些处理的时候，可以重写它的set或get方法。比如想在设置<code>name</code>的时候，进行一些处理，可以重写<code>name</code>property的set方法，使用以下代码：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name: String? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">set</span>(value) &#123;</span><br><span class="line">        field = <span class="string">"My name is <span class="variable">$value</span>"</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>注意上面代码段中的<strong><code>field</code></strong>字段，它代表了property的值，而不是property名<code>name</code>。再次运行之前的<code>main</code>方法，输出为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User: name &#x3D; My name is zhaiyz</span><br></pre></td></tr></table></figure>
<p>可以看出，name的值添加上了<code>My name is</code>。<br>同样也可以重写property的get方法来改变最后得到的结果，比如以下代码可以在取生日property值时，如果没有值就返回当前时间。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> birthday: Date? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">get</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> field ?: Date()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>同样，<strong><code>field</code></strong>字段为当前property的值。实例化一个User对象，不进行任何赋值操作，打印<code>birthday</code>时也会有值。运行以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    val user &#x3D; User()</span><br><span class="line"></span><br><span class="line">    println(&quot;User: birthday &#x3D; $&#123;user.birthday&#125;&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User: birthday &#x3D; Tue Aug 07 22:27:00 CST 2018</span><br></pre></td></tr></table></figure>

<p>Kotlin中的property功能上与Java的field加上setter/getter方法一样，但是使用变得简洁了很多。</p>
]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin字符串模板</title>
    <url>/2018/08/05/Kotlin%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p>在Kotlin中进行一些字符串拼接的时候，使用字符串模板会很简单。以<code>$</code>开始，直接根上变量名或是用<code>{}</code>包含表达示即可。代码示例：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> name = <span class="string">"world"</span></span><br><span class="line">    println(<span class="string">"Hello <span class="variable">$name</span>!"</span>)</span><br><span class="line">    println(<span class="string">"Hello <span class="subst">$&#123;name.capitalize()&#125;</span>!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello world!</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure>
<p>如果想直接输出<code>$</code>，那么需要对<code>$</code>进行转义，使用<code>\$</code>。<br>代码：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">println(<span class="string">"Hello \$name!"</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello $name!</span><br></pre></td></tr></table></figure>
<p>字符串模板只是Kotlin的语法糖，<code>println(&quot;Hello $name!&quot;)</code>对应的字节码反编译为Java代码，相当于<code>String var2 = &quot;Hello &quot; + name + &quot;!&quot;;</code>，只是方便了使用。</p>
]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin中List转Map的常用方式</title>
    <url>/2018/07/30/Kotlin%E4%B8%ADList%E8%BD%ACMap%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>在开发中，经常用到把一个<code>List</code>按一定规则转换为<code>Map</code>来使用。本文就介绍下几种常用的转换方式。<br>代码如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(<span class="keyword">val</span> id: <span class="built_in">Long</span>, <span class="keyword">val</span> name: String, <span class="keyword">val</span> age: <span class="built_in">Int</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> users = listOf(User(<span class="number">1</span>, <span class="string">"张三"</span>, <span class="number">20</span>), User(<span class="number">2</span>, <span class="string">"李四"</span>, <span class="number">20</span>), User(<span class="number">3</span>, <span class="string">"王五"</span>, <span class="number">25</span>), User(<span class="number">4</span>, <span class="string">"赵六"</span>, <span class="number">25</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 变为以id为key, user为value的map，类型为Map&lt;Long, User&gt;</span></span><br><span class="line">    println(users.associateBy &#123; it.id &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 变为以id为key，name为value的map，类型为Map&lt;Long, String&gt;</span></span><br><span class="line">    println(users.associate &#123; it.id to it.name &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以自定义key和value的map，类型为Map&lt;String, String&gt;</span></span><br><span class="line">    println(users.associateBy(&#123; <span class="string">"id:<span class="subst">$&#123;it.id&#125;</span>"</span> &#125;, &#123; <span class="string">"name:<span class="subst">$&#123;it.name&#125;</span>"</span> &#125;))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成按age聚合，对象List为value的map，类型为Map&lt;Int, List&lt;User&gt;&gt;</span></span><br><span class="line">    println(users.groupBy &#123; it.age &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;1&#x3D;User(id&#x3D;1, name&#x3D;张三, age&#x3D;20), 2&#x3D;User(id&#x3D;2, name&#x3D;李四, age&#x3D;20), 3&#x3D;User(id&#x3D;3, name&#x3D;王五, age&#x3D;25), 4&#x3D;User(id&#x3D;4, name&#x3D;赵六, age&#x3D;25)&#125;</span><br><span class="line">&#123;1&#x3D;张三, 2&#x3D;李四, 3&#x3D;王五, 4&#x3D;赵六&#125;</span><br><span class="line">&#123;id:1&#x3D;name:张三, id:2&#x3D;name:李四, id:3&#x3D;name:王五, id:4&#x3D;name:赵六&#125;</span><br><span class="line">&#123;20&#x3D;[User(id&#x3D;1, name&#x3D;张三, age&#x3D;20), User(id&#x3D;2, name&#x3D;李四, age&#x3D;20)], 25&#x3D;[User(id&#x3D;3, name&#x3D;王五, age&#x3D;25), User(id&#x3D;4, name&#x3D;赵六, age&#x3D;25)]&#125;</span><br></pre></td></tr></table></figure>
<p>转成的Map其实都是<code>LinkedHashMap</code>，看输出的结果也可以看出来，生成的Map中的对象顺序和List中的一致。<br>当key的重复的时候，后面的值覆盖前面的值。比如添加一行代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">println(users.associateBy &#123; it.age &#125;)</span><br></pre></td></tr></table></figure>
<p>来使用<code>age</code>字段当作key，其中id为1和2的age重复，id为3和4的age重复，生成map的时候，会保留下id为2和4的，id为1和3的值被覆盖了。此行代码的输出为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;20&#x3D;User(id&#x3D;2, name&#x3D;李四, age&#x3D;20), 25&#x3D;User(id&#x3D;4, name&#x3D;赵六, age&#x3D;25)&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin扩展方法</title>
    <url>/2018/07/29/Kotlin%E6%89%A9%E5%B1%95%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Kotlin与Java相比有一个很高级的特性，就可以扩展方法。可以直接为一个类的所有对象添加方法。<br>比如以下代码可以为所有<code>String</code>类型对象添加一个<code>printIt()</code>方法，调用时打印其本身。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">printIt</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码可以简写为</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">printIt</span><span class="params">()</span></span> = println(<span class="keyword">this</span>)</span><br></pre></td></tr></table></figure>
<p>使用方式如下</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="string">"Hello world!"</span>.printIt()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：<code>Hello world!</code><br>在扩展方法里面<code>this</code>为调用者本身。</p>
<a id="more"></a>

<p>Kotlin的扩展方法在扩展一些第三方包和Java本身包里面的类方法时很有用。比如在JDK 1.8中新加入了<code>LocalDate</code>和<code>LocalDatetime</code>类型，方便了日期的处理，但使用时经常会遇到<code>Date</code>类型与这两种类型的转换。这时就可以定义几个扩展方法，方便使用。代码如下</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> LocalDate.<span class="title">toDate</span><span class="params">(zoneId: <span class="type">ZoneId</span> = ZoneId.systemDefault()</span></span>) = Date.from(atStartOfDay(zoneId).toInstant())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> LocalDateTime.<span class="title">toDate</span><span class="params">(zoneId: <span class="type">ZoneId</span> = ZoneId.systemDefault()</span></span>) = Date.from(atZone(zoneId).toInstant())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> Date.<span class="title">toLocalDate</span><span class="params">(zoneId: <span class="type">ZoneId</span> = ZoneId.systemDefault()</span></span>) = toInstant().atZone(zoneId).toLocalDate()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> Date.<span class="title">toLocalDateTime</span><span class="params">(zoneId: <span class="type">ZoneId</span> = ZoneId.systemDefault()</span></span>) = toInstant().atZone(zoneId).toLocalDateTime()</span><br></pre></td></tr></table></figure>
<p>以上方法中还使用到了Kotlin默认参数特性。<br>使用时很简单，代码如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> date = Date()</span><br><span class="line">    println(date.toLocalDate())</span><br><span class="line">    println(date.toLocalDateTime())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> localDate = LocalDate.now()</span><br><span class="line">    println(localDate.toDate())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> localDateTime = LocalDateTime.now()</span><br><span class="line">    println(localDateTime.toDate())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2018-07-29</span><br><span class="line">2018-07-29T20:50:19.957</span><br><span class="line">Sun Jul 29 00:00:00 CST 2018</span><br><span class="line">Sun Jul 29 20:50:20 CST 2018</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin默认参数方法</title>
    <url>/2018/07/21/Kotlin%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Kotlin中参数是可以设置默认值的，设置默认值的参数，如果没有传就使用默认值。<br>示例代码，保存在Funs.kt中：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sayHello</span><span class="params">(name: <span class="type">String</span> = <span class="string">"world"</span>)</span></span> &#123;</span><br><span class="line">    println(<span class="string">"Hello <span class="variable">$name</span>!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用以上代码时，可以有两种方式，如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    sayHello()</span><br><span class="line">    sayHello(<span class="string">"zhaiyz"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello world!</span><br><span class="line">Hello zhaiyz!</span><br></pre></td></tr></table></figure>
<p><code>sayHello()</code>没有传参，<code>name</code>就使用<code>world</code>做为值，如果传入了参数，就使用参数值。</p>
<p>但是以上方法在Java中调用的时候，只有<code>sayHello(String name)</code>方法，如果想在Java中使用不传默认参数的方法，需要在方法上加上<code>@JvmOverloads</code>，这样Kotlin编译的时候，会生成一个不需要当前默认值的重载方法，之后就可以在Java中使用没有默认参数的方法了。</p>
<a id="more"></a>

<p>如果有多个默认参数，而且只用到后面的参数时，需要指定参数名设值。<br>示例代码：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sayHello</span><span class="params">(name: <span class="type">String</span> = <span class="string">"world"</span>, repeat: <span class="type">Int</span> = <span class="number">1</span>)</span></span> &#123;</span><br><span class="line">    repeat(repeat) &#123;</span><br><span class="line">        println(<span class="string">"Hello <span class="variable">$name</span>!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用时，如果只想传<code>repeat</code>参数，需要使用以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    sayHello(repeat &#x3D; 2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello world!</span><br><span class="line">Hello world!</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin包级函数</title>
    <url>/2018/07/18/Kotlin%E5%8C%85%E7%BA%A7%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>Kotlin与Java最大的不同之一就是函数可以不需要定义在类中。本文就介绍下Kotlin的包级函数。</p>
<p>Kotlin中定义一个包级函数很简单：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhaiyz.demo</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sayHello</span><span class="params">(name: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    println(<span class="string">"Hello <span class="variable">$name</span>!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>把以上内容保存在<code>Funs.kt</code>中。<br>在Kotlin中使用包级函数：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zhaiyz.demo.sayHello</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    sayHello(<span class="string">"world"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以<code>import</code>对应包下面的函数，直接使用。<br>在Java中使用Kotlin的包级函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zhaiyz.demo.FunsKt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FunsKt.sayHello(<span class="string">"world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为Java中函数必须通过类或对象调用，Kotlin的包级函数在Java中使用要通过Kotlin包级方法所在的文件名+Kt作为类引入，再进行调用，相当于使用静态函数。</p>
<p>Kotlin中的main函数，也是一个特殊的包级函数，可以做为程序的入口。</p>
]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin中定义静态方法</title>
    <url>/2018/07/17/Kotlin%E4%B8%AD%E5%AE%9A%E4%B9%89%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>开发过程中经常要写一些工具类，里面定义一些静态方法。本文介绍下在Kotlin中定义静态方法的方式。<br>可以使用以下两种方式：</p>
<ol>
<li>使用<code>object</code>，比如：<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">object</span> Utils &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">sayHello</span><span class="params">(name: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        println(<span class="string">"Hello <span class="variable">$name</span>!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>使用<code>companion object</code><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">sayHello</span><span class="params">(name: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">            println(<span class="string">"Hello <span class="variable">$name</span>!"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
在Kotlin中使用调用方式是一样的：<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    Utils.sayHello(<span class="string">"world"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
在Java中调用时，如果使用<code>object</code>：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Utils.INSTANCE.sayHello(<span class="string">"world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
如果使用<code>companion object</code>：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Utils.Companion.sayHello(<span class="string">"world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>使用DecimalFormat格式化小数</title>
    <url>/2018/07/16/%E4%BD%BF%E7%94%A8DecimalFormat%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%B0%8F%E6%95%B0/</url>
    <content><![CDATA[<p>开发中会遇到一些需要对小数进行格式化的地方，这时可以使用<code>DecimalFormat</code>。此文记录一个使用<code>DecimalFormat</code>格式化小数时的一个注意事项。</p>
<p>比如现在有两个小数<code>1.25</code>和<code>1.15</code>，需要四舍五入保留一位小数。可以使用以下kotlin代码：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> number1 = <span class="number">1.25</span></span><br><span class="line">    <span class="keyword">val</span> number2 = <span class="number">1.15</span></span><br><span class="line">    <span class="keyword">val</span> decimalFormat = DecimalFormat(<span class="string">"0.0"</span>)</span><br><span class="line">    println(decimalFormat.format(number1))</span><br><span class="line">    println(decimalFormat.format(number2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是以上代码的输入为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.2</span><br><span class="line">1.2</span><br></pre></td></tr></table></figure>
<p>和预期的不一样。这是因为<code>DecimalFormat</code>默认的<code>RoundingMode</code>为<code>RoundingMode.HALF_EVEN</code>。API中的解释为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Rounding mode to round towards the &quot;nearest neighbor&quot; unless both neighbors are equidistant, in which case, round towards the even neighbor. Behaves as for RoundingMode.HALF_UP if the digit to the left of the discarded fraction is odd; behaves as for RoundingMode.HALF_DOWN if it&#39;s even.</span><br></pre></td></tr></table></figure>
<p>如果要四舍五入，需要显示的设置<code>RoundingMode</code>为<code>RoundingMode.HALF_UP</code>，最终代码为：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> number1 = <span class="number">1.25</span></span><br><span class="line">    <span class="keyword">val</span> number2 = <span class="number">1.15</span></span><br><span class="line">    <span class="keyword">val</span> decimalFormat = DecimalFormat(<span class="string">"0.0"</span>)</span><br><span class="line">    decimalFormat.roundingMode = RoundingMode.HALF_UP</span><br><span class="line">    println(decimalFormat.format(number1))</span><br><span class="line">    println(decimalFormat.format(number2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码的输入为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.3</span><br><span class="line">1.2</span><br></pre></td></tr></table></figure>
<p>符合预期。</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>DecimalFormat</tag>
      </tags>
  </entry>
  <entry>
    <title>项目中配置文件管理</title>
    <url>/2015/11/15/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>项目开发中，一般都会有开发环境、测试环境、生产环境三类环境。各种配置在三类环境中也各不相同，要做到打成的包放到各个环境中都能正常运行，就需要把配置独立出来。本文件就介绍下把配置文件独立管理的方式。</p>
<p>以tomcat为例，可以在<code>$TOMCAT_HOME/bin/setenv.sh</code>中添加<code>configFile</code>变量为指定配置文件地址，三个环境中分别配置为各个配置文件在本地的地址：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CATALINA_OPTS="$CATALINA_OPTS -DconfigFile="the config file path""</span><br></pre></td></tr></table></figure>
<p>这样在代码中使用<code>System.getProperty(&quot;configFile&quot;)</code>就可以读取到配置文件地址。然后使用<code>Properties</code>相关方法读取文件，再使用其中各项配置。</p>
<a id="more"></a>

<p>如果使用<code>spring</code>，可以直接使用：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"$&#123;configFile&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样就可以在<code>spring</code>中使用configFile中的各项配置了，比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>同时<code>spring</code>还支持从网络上加载配置文件，可以把配置文件放到一台服务器上。然后使用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CATALINA_OPTS="$CATALINA_OPTS -DconfigFile="http://yourserver.com/config-file.properties""</span><br></pre></td></tr></table></figure>
<p>这样只需要维护一个配置文件，不用每个开发人员在本机放一份了。</p>
<p>我见过一些项目使用maven的profile来管理不同环境的配置文件，我建议配置文件不能放在版本库中管理，不然一些敏感的账户密码之类的，每个开发人员都能看到了。如果说只是很少的几个配置项，不需要使用配置文件管理的话，完全可以直接把配置项使用这种方式写到环境变量中，在代码中使用<code>System.getProperty(&quot;key&quot;)</code>来使用。</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>进行参数校验的位置</title>
    <url>/2015/11/12/%E8%BF%9B%E8%A1%8C%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C%E7%9A%84%E4%BD%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>有参数的地方就要有校验，本文就介绍下我理解的web项目参数校验，对于其他种类的项目，也可以参考。</p>
<p>首先来说，参数校验可以分为两种：一种是参数的格式校验，比如说字段不能为空，字符串长度不能超过10，数值不能小于20等；还有一种是参数业务校验，比如用户名是否已存在，订单号对应的订单是否可支付等。</p>
<p>对于参数格式校验可以在三个地方进行校验。可以在前端页面上，也可以在应用层中的<code>controller</code>或是<code>action</code>中，也可以在服务层的<code>service</code>中进行。一般来说前端页面上要有，不光能减少与服务器的通信，还能提升用户体验。至于在应用层进行校验还是服务层校验就需要看项目情况了。如果说应用层和服务层的一个功能，完全由一个人来完成，而且约定好，所有参数格式必需校验通过之后才能传入到服务层，这种情况可以只在应用层进行校验。如果说服务层的开发人员，不确定参数是否会经过校验就传入进来，那么就在方法中首先进行下参数格式校验。</p>
<a id="more"></a>

<p>无论是在页面，应用层还是服务层进行参数格式校验时，校验的规则一定要一样。既然规则一样，就是会有重复的地方。对于应用层和服务层，可以共用同一套逻辑。可以用这样一种方式实现共用，使用<code>Hibernate Validator</code>对参数对象按要求进行注解，进入方法之后，首先使用<code>Hibernate Validator</code>进行校验，然后再调用其他代码。前端页面就需要独立写校验代码了。如果说能把后台的校验规则，自动的转换成前端使用的代码，那就再好不过了。这样就可以做到校验规则写一次，哪都可以用了。</p>
<p>参数业务校验建议是只在服务层做就可以了。</p>
<p>我建议是在服务层进行所有的校验，因为服务层是真正知道参数应该是什么样子的，需要符合什么样的业务逻辑。</p>
<p>总的来说，就是第一个方法在调用第二个方法时，在调用前进行参数校验还是在第二个方法中进行校验。本着<strong>输入是恶魔</strong>的理念，建议是在真正使用参数的地方进行校验。</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>参数校验</tag>
      </tags>
  </entry>
  <entry>
    <title>项目开发持续集成时用到的一些工具</title>
    <url>/2015/11/11/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%97%B6%E7%94%A8%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>以下是我在开发中用到的一些工具。</p>
<table>
<thead>
<tr>
<th>作用</th>
<th>工具名称</th>
<th>官网地址</th>
</tr>
</thead>
<tbody><tr>
<td>maven私服</td>
<td>Nexus</td>
<td><a href="http://www.sonatype.org/nexus/" target="_blank" rel="noopener">http://www.sonatype.org/nexus/</a></td>
</tr>
<tr>
<td>git服务器</td>
<td>GitLab</td>
<td><a href="https://about.gitlab.com/" target="_blank" rel="noopener">https://about.gitlab.com/</a></td>
</tr>
<tr>
<td>任务管理</td>
<td>Redmain</td>
<td><a href="http://www.redmine.org/" target="_blank" rel="noopener">http://www.redmine.org/</a></td>
</tr>
<tr>
<td>任务管理</td>
<td>Teambition</td>
<td><a href="https://www.teambition.com/" target="_blank" rel="noopener">https://www.teambition.com/</a></td>
</tr>
<tr>
<td>打包发布</td>
<td>Jenkins</td>
<td><a href="https://jenkins-ci.org/" target="_blank" rel="noopener">https://jenkins-ci.org/</a></td>
</tr>
<tr>
<td>代码质量</td>
<td>SonarQube</td>
<td><a href="http://www.sonarqube.org/" target="_blank" rel="noopener">http://www.sonarqube.org/</a></td>
</tr>
<tr>
<td>知识共享</td>
<td>GitBook</td>
<td><a href="https://www.gitbook.com/" target="_blank" rel="noopener">https://www.gitbook.com/</a></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>持续集成</category>
      </categories>
      <tags>
        <tag>开发</tag>
        <tag>环境</tag>
      </tags>
  </entry>
  <entry>
    <title>按时间区间查询时要注意的地方</title>
    <url>/2015/11/10/%E6%8C%89%E6%97%B6%E9%97%B4%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2%E6%97%B6%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/</url>
    <content><![CDATA[<p>在开发中肯定会遇到一些按时间区间进行查询的地方，这时需要注意对边界值的处理。本文就介绍下按时间区间进行查询的时候，需要注意的地方。</p>
<p>比如现在要查询订单表中下单时间在<code>2015-11-10 10:00:00</code>至<code>2015-11-10 20:00:00</code>。如果sql语句写成以下这样(以下为伪代码，真实代码中时间参数可能不是这样的)：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">Order</span> <span class="keyword">where</span> create_date &gt;= <span class="string">'2015-11-10 10:00:00'</span> <span class="keyword">and</span> create_date &lt;= <span class="string">'2015-11-10 20:00:00'</span>;</span><br></pre></td></tr></table></figure>
<p>这种闭合区间会导致重复查询。比如下在要查询下单时间在<code>2015-11-10 20:00:00</code>至<code>2015-11-10 22:00:00</code>的订单，sql代码会成为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">Order</span> <span class="keyword">where</span> create_date &gt;= <span class="string">'2015-11-10 20:00:00'</span> <span class="keyword">and</span> create_date &lt;= <span class="string">'2015-11-10 22:00:00'</span>;</span><br></pre></td></tr></table></figure>
<p>这样会导致下单时间为<code>2015-11-10 20:00:00</code>的订单重复查询。无论是出报表还是要进行些批处理之类的操作，都会把这个订单处理两次。</p>
<a id="more"></a>

<p>同样如果的都使用开区间进行查询，把sql语句写成：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">Order</span> <span class="keyword">where</span> create_date &gt; <span class="string">'2015-11-10 10:00:00'</span> <span class="keyword">and</span> create_date &lt; <span class="string">'2015-11-10 20:00:00'</span>;</span><br></pre></td></tr></table></figure>
<p>这样就会导致在边界的记录查询不到。</p>
<p>所以我们要使用一个半闭半开区间，如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">Order</span> <span class="keyword">where</span> create_date &gt;= <span class="string">'2015-11-10 10:00:00'</span> <span class="keyword">and</span> create_date &lt; <span class="string">'2015-11-10 20:00:00'</span>;</span><br></pre></td></tr></table></figure>
<p>这样就可以做到即不重复查询，也不会漏查。我建议是前会使用<code>&gt;=</code>后面使用<code>&lt;</code>，也就是前面的时间包含后面的时间不包含。</p>
<p>需要注意的是，不要使用<code>between</code> <code>and</code>，因为在不同的数据库中对于边界处理的方法可能不同，有的包含，有的不包含。也可能会造成重复查询或漏查。</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>时间</tag>
        <tag>查询</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu安装fcitx输入法</title>
    <url>/2015/11/09/ubuntu%E5%AE%89%E8%A3%85fcitx%E8%BE%93%E5%85%A5%E6%B3%95/</url>
    <content><![CDATA[<p>ubuntu自带的输入法是<code>ibus</code>，只是能用，远远不够用。搜狗也出了linux版的<a href="http://pinyin.sogou.com/linux/?r=pinyin" target="_blank" rel="noopener">输入法</a>，但是我遇到过3次，安装完成重启之后进入不了桌面的情况。我用的是fcitx输入法，本文就介绍下fcitx的安装与配置。</p>
<h2 id="安装fcitx拼音"><a href="#安装fcitx拼音" class="headerlink" title="安装fcitx拼音"></a>安装fcitx拼音</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install fcitx-pinyin -y</span><br></pre></td></tr></table></figure>
<p>以上命令运行完成之后，就已经安装好了，现在进行配置。执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">im-config</span><br></pre></td></tr></table></figure>
<p>在弹出的提示窗口中选择<code>确定</code>和<code>是</code>，然后就能进入如下界面，选中<code>fcitx</code>。<br><img src="http://img.zhaiyz.tech/images/blog/20151109/setup01.png" alt="install fcitx"></p>
<h2 id="注销或重启"><a href="#注销或重启" class="headerlink" title="注销或重启"></a>注销或重启</h2><p>注销或重启，以使前面的配置生效。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用<code>Ctrl</code>+<code>Space</code>就可以激活输入法，使用<code>Shift</code>就可以快速切换中英文输入。</p>
<a id="more"></a>

<h2 id="隐藏托盘中自带的输入法图标"><a href="#隐藏托盘中自带的输入法图标" class="headerlink" title="隐藏托盘中自带的输入法图标"></a>隐藏托盘中自带的输入法图标</h2><p>安装完<code>fcitx</code>后，托盘中还会显示出系统自带的输入法图标，如下图中红框部分：<br><img src="http://img.zhaiyz.tech/images/blog/20151109/setup02.png" alt="install fcitx"><br>单击红框内容，在弹出的菜单中选择<code>文本输入设置</code>，在弹出的窗口中把<code>在菜单栏显示当前输入源</code>的复选框<strong>不选中</strong>，就可以了。如下图：<br><img src="http://img.zhaiyz.tech/images/blog/20151109/config03.png" alt="install fcitx"></p>
<h2 id="安装五笔或五笔拼音"><a href="#安装五笔或五笔拼音" class="headerlink" title="安装五笔或五笔拼音"></a>安装五笔或五笔拼音</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install fcitx-table-wubi -y</span><br><span class="line">sudo apt-get install fcitx-table-wbpy -y</span><br></pre></td></tr></table></figure>
<p>使用五笔的话，建议使用<code>fcitx-table-wbpy</code>，打字过程中遇到个不知道怎么折的，可以直接用拼音，很方便。</p>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>输入法</tag>
        <tag>fcitx</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库表字段的默认值</title>
    <url>/2015/11/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E5%AD%97%E6%AE%B5%E7%9A%84%E9%BB%98%E8%AE%A4%E5%80%BC/</url>
    <content><![CDATA[<p>在设计表的时候，可以为一个字段指定默认值，这样这个字段在数据库中就不会为空。也有在<code>insert</code>或是<code>update</code>数据的时候，把表中的<code>create_date</code>、<code>modified_date</code>之类的时间字段在sql语句是使用<code>now()</code>来赋值，而不需要在代码中设置。还有一种是把默认值的管理交给代码控制，包括时间之类的全部在代码中使用<code>new Date()</code>等方法获取之后再传入到数据保存。本文就以一个时间字段的赋值时机来介绍下这两种方式的使用。</p>
<p>比如说有一个<code>User</code>表，表结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+-------------+-------------+------+-----+---------+----------------+</span><br><span class="line">| Field       | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+-------------+-------------+------+-----+---------+----------------+</span><br><span class="line">| id          | int(11)     | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name        | varchar(32) | YES  |     | NULL    |                |</span><br><span class="line">| create_date | datetime    | YES  |     | NULL    |                |</span><br><span class="line">+-------------+-------------+------+-----+---------+----------------+</span><br></pre></td></tr></table></figure>
<p>以<code>mybatis</code>为例，如果想让数据库生成<code>create_date</code>值，插入一条用户记录时使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into User (name, create_date) values (#&#123;name&#125;, now());</span><br></pre></td></tr></table></figure>
<p>在持久层的方法可能是这样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int insert(User user);</span><br></pre></td></tr></table></figure>
<p>此例中插入一条<code>User</code>记录可以用以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setName(<span class="string">"test01"</span>);</span><br><span class="line"><span class="keyword">int</span> count = insert(user);</span><br><span class="line"><span class="keyword">int</span> id = user.getId();</span><br></pre></td></tr></table></figure>
<p>用此种方法可以返回影响的行数，还有就是新插入记录的<code>id</code>（需要在mybatis中添加其他语句实现，本文不讨论）。但是如果想得到新插入记录的<code>create_date</code>，那么就需要再根据返回的<code>id</code>再次进行查询。</p>
<a id="more"></a>

<p>另一种就是把所有变量的值在代码中都赋值好，再生成对应的sql语句，同样是插入用户记录的sql语句就变为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into User (name, create_date) values (#&#123;name&#125;, #&#123;createDate&#125;);</span><br></pre></td></tr></table></figure>
<p>此时插入一条<code>User</code>记录的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setName(<span class="string">"test01"</span>);</span><br><span class="line">user.setCreateDate(<span class="keyword">new</span> Date());</span><br><span class="line"><span class="keyword">int</span> count = insert(user);</span><br></pre></td></tr></table></figure>
<p>由于所有的数据持久层都能在一次插入之后获取，所以此时的代码可以写成这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">User <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure>
<p>不是返回影响的行数，而是把新插入的记录返回回去，以方便使用。</p>
<p>所以这两种方式最大的不同就在于，在持久层或是服务层<strong>只需要知道插入操作影响的行数和<code>id</code>，还是需要把新插入的对象返回，供上一层使用</strong>。在第一种方式中，使用数据库生成的值，除主键外不会赋值到对象中，此时数据库中这些字段的值并不在对象中。使用第二种方式由于只有主键是数据库生成的（本例中是这样的，主键也可以先生成再传入到数据库），而且主键可以在插入后返回，其他属性在插入前都是已知的，这样插入完成之后，数据库中此记录的值与对象中的是完全一致的。</p>
<p>使用数据库赋值时间字段有一个好处，能保证多台应用服务器操作数据库时的时间上的准确性。使用代码赋值时间字段的话，取得的时间都是应用服务器的时间，如果A服务器的时间比B服务器晚1秒，A服务器先插入一条数据，紧接着B服务器也插入了一条，就会出现先插入数据的时间比后插入的时候还晚。使用数据库赋值的话，时间都以数据库服务器的为准，就不会出现这种问题。</p>
<p>其他字段的赋值时机的不同造成的影响和此例中时间字段的效果类似。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>设计</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>装完ubuntu之后的一些设置</title>
    <url>/2015/11/04/%E8%A3%85%E5%AE%8Cubuntu%E4%B9%8B%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>安装ubuntu系统可以参考<a href="/2015/11/01/一步一步安装ubuntu/">一步一步安装ubuntu</a>。安装完成之后需要根据自己的习惯进行一些配置，本文介绍一下我自己的一些配置。</p>
<h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><p>这肯定是第一件要做的事情。我建议是安装过程中不需要联网，等安装完成之后，根据自己的网络情况，找到一个速度快的源。这样再安装软件或是更新系统的时候才会快。以下为换源的图文步骤：</p>
<ol>
<li>单击桌面右上角的设置按钮，就是那个小齿轮。在弹出的菜单中选择<code>系统设置</code>，再在弹出的窗口中的<code>系统</code>设置中选择<code>软件和更新</code>。<br><img src="http://img.zhaiyz.tech/images/blog/20151104/config01.png" alt="ubuntu config01"><br><img src="http://img.zhaiyz.tech/images/blog/20151104/config02.png" alt="ubuntu config02"></li>
<li>单击下载自中的下拉列表，选择<code>其他站点</code>，在<code>选择下载服务器</code>窗口的<code>中国</code>节点下面，选择一个自己访问比较快的源。不知道选择哪个的话，右边有一个<code>选择最佳服务器</code>，单击这个，让系统自己通过测试选择一个访问最快的站点。我一直在用<code>mirrors.aliyun.com</code>这个源，很快，很稳定。推荐使用。<br><img src="http://img.zhaiyz.tech/images/blog/20151104/config03.png" alt="ubuntu config03"><br><img src="http://img.zhaiyz.tech/images/blog/20151104/config04.png" alt="ubuntu config04"></li>
<li>选择好服务器的时候，需要输入密码来确认操作，之后会提示<code>可用的软件列表信息已过时</code>，选择<code>重新载入</code>。<br><img src="http://img.zhaiyz.tech/images/blog/20151104/config05.png" alt="ubuntu config05"><br><img src="http://img.zhaiyz.tech/images/blog/20151104/config06.png" alt="ubuntu config06"></li>
<li>经过以上操作，就完成了更换更新源的配置。</li>
</ol>
<a id="more"></a>

<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>换完源之后，可以对系统和软件进行一次整体升级。使用<code>Ctrl+Alt+t</code>调出终端，输入<code>sudo apt-get update &amp;&amp; sudo apt-get upgrade -y</code>，再根据提示输入密码就可以了。此步完成之后，系统本身和系统中的软件就都是最新版的了。以下为操作中的截图。<br><img src="http://img.zhaiyz.tech/images/blog/20151104/config08.png" alt="ubuntu config08"><br><img src="http://img.zhaiyz.tech/images/blog/20151104/config09.png" alt="ubuntu config09"></p>
<h2 id="隐私"><a href="#隐私" class="headerlink" title="隐私"></a>隐私</h2><p>ubuntu现在默认是开启在线搜索的，我是认为这个没什么用，可以通过<code>系统设置</code>中的<code>安全和隐私</code>关闭。打开<code>安全和隐私</code>窗口后，选择<code>搜索</code>页。把<code>包含在线搜索结果</code>中的<code>开启</code>单击一下变成<code>关闭</code>就可以了。<br><img src="http://img.zhaiyz.tech/images/blog/20151104/config10.png" alt="ubuntu config10"></p>
<h2 id="调整启用器"><a href="#调整启用器" class="headerlink" title="调整启用器"></a>调整启用器</h2><p>默认情况下左边的启用器中，包含了<code>LibreOffice</code>相关软件以及<code>Amazon</code>等软件。你可以根据自己的需求，进行移除。在选中应用的图标上右击，选择<code>从启动器解锁</code>即可。</p>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义异常的分类</title>
    <url>/2015/11/03/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E7%9A%84%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<p>一般一个项目都会有一套自己的异常框架。异常框架做好了，系统的健壮性，安全性都有保证，而且代码也会整洁可读性高。本文就介绍下我对异常框架设计的一些思考。</p>
<p>一种是可以把异常设计的很细，比如说对于<code>User</code>的操作，就可以定义出<code>NoSuchUserException</code>来表示用户不存在、<code>UserExistsException</code>表示用户已存在，甚至还会有<code>DuplicateUserNameException</code>表示用户名重复。这只是对于一个<code>User</code>对象的操作，如果对于每个对象操作都这么定义，那就太多了。这种异常确实能从名字上就能知道其含义，但是使用起来太麻烦了。如果说有一个代码生成器，对于每张表都能自动的生成这些对应的异常，到也可以用用。</p>
<p>还有一种设计是按层定义异常，可以分为三个。一个是<code>DaoException</code>来封装所有持久层的异常，一个是<code>ServiceException</code>来封装所有服务层异常，再有一个<code>AppException</code>来封装应用层的异常。使用的时候会在服务层把<code>DaoException</code>转化为<code>ServiceException</code>，再在应用层把<code>ServiceException</code>封装成<code>AppException</code>。最外层有一个拦截全局异常，拦截<code>AppException</code>就可以了。</p>
<a id="more"></a>

<p>还可以把异常分为这么几类，一类是<code>参数格式异常</code>，<code>ArgumentException</code>；一类是<code>业务校验异常</code>，<code>BusinessException</code>；再一个是<code>ServiceException</code>，来定义服务异常。<code>ArgumentException</code>在所有的参数格式校验出错的时候使用；<code>BusinessException</code>在业务校验出错的时候使用，比如在校验用户名重复的时候可以使用此异常；<code>ServiceException</code>处理业务逻辑代码的时候出错时使用。</p>
<p>还有一种是只使用一个<code>AppException</code>，在这个异常类中添加一个<code>type</code>属性，通过<code>type</code>来区分不同的异常。<code>type</code>可以用一个枚举来维护，这个<code>type</code>值可以是上面提到的<code>参数格式</code>、<code>业务校验</code>、<code>服务</code>。也可以只用一个<code>AppException</code>，所有的异常都封装成这个，不再按<code>type</code>细分。</p>
<p>总之，异常框架弄好了，无论是开发的时候定位错误位置，代码的整洁，到显示给用户时的错误提示，都会很方便，准确。</p>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库设计中的审计字段</title>
    <url>/2015/11/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E5%AE%A1%E8%AE%A1%E5%AD%97%E6%AE%B5/</url>
    <content><![CDATA[<p>在数据库表设计中，经常要在表中添加一些审计字段，来标识一条记录是谁在什么时候创建的，或者是谁在什么时候修改的。可以叫这些字段为审计字段。这些字段只是最基本的记录操作的方式，如果一个表的数据比较重要，那就需要单独为这张表建立一个对应的日志表来记录表中数据的变化情况。本文只介绍简单的审计字段的设计和使用。</p>
<p>最基本的审计字段有<code>创建时间</code>、<code>创建人</code>，<code>修改时间</code>、<code>修改人</code>。以下是对每个字段的说明。</p>
<ul>
<li><code>创建时间</code>，<code>createDate</code>。一般来说这个字段都有。</li>
<li><code>创建人</code>，<code>createUser</code>。很多时候表中会有其他字段来表示这个意思，比如说<code>userId</code>之类的，如果有那这个字段就不用了。</li>
<li><code>修改时间</code>，<code>modifiedDate</code>，如果表中的记录可能会被修改，就需要把修改时间记录下来。</li>
<li><code>修改人</code>，<code>modifiedUser</code>，如果表中的记录除了创建用户还可能有其他用户修改，那就要有这个字段。</li>
</ul>
<p>有时候除了这些字段，还可能记录下<code>IP</code>甚至是把浏览器中的<code>User Agent</code>记录下来。一般来说，日志类的表都不需要<code>修改时间</code>和<code>修改人</code>。原则就是看数据的重要性，再根据需求进行取舍。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>设计</tag>
      </tags>
  </entry>
  <entry>
    <title>一步一步安装ubuntu</title>
    <url>/2015/11/01/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AE%89%E8%A3%85ubuntu/</url>
    <content><![CDATA[<p>我最开始接触到的ubuntu版本是8.04，中间各种折腾，到12.04版出来的时候，就把ubuntu作为开发系统使用。认为相比windows，使用ubuntu开发还是方便很多。本文将图文介绍一下ubuntu的安装过程，使用的版本是<code>ubuntu 14.04 lts</code>。安装过程是在<code>virtualbox</code>中进行的。如果是开发电脑，建议是至少8G内存，最好再是SSD。</p>
<p>国内也有不少ubuntu的镜像网站，比如<code>http://mirrors.aliyun.com/ubuntu-releases/</code>，<code>http://mirrors.163.com/ubuntu-releases/</code>等。下载好<code>ubuntu-14.04.3-desktop-amd64.iso</code>文件，使用刻录软件烧到光盘中，或是使用<a href="http://www.linuxliveusb.com/" target="_blank" rel="noopener">LinuxLive USB Creator</a>把系统刻录到u盘中。以下为详细步骤说明和截图。</p>
<a id="more"></a>

<ol>
<li>用刻录好系统的光盘或是u盘启用后，会到这个页面，默认语言是<code>English</code>。<br><img src="http://img.zhaiyz.tech/images/blog/20151101/step01.png" alt="ubuntu install step01"></li>
<li>修改语言为<code>中文(简体)</code>，安装界面中的英文就变成了汉字，点击<code>安装Ubuntu</code>。<br><img src="http://img.zhaiyz.tech/images/blog/20151101/step02.png" alt="ubuntu install step02"></li>
<li>在这个页面中，可以先不连接到网络，也不用选中<code>安装中下载更新</code>和<code>安装这个第三方软件</code>，这些内容等到安装完成之后再统一进行操作。如果安装的时候开着无线，可能会有连接到无线的提示，都选择不连接。选择<code>继续</code>进入下一界面。<br><img src="http://img.zhaiyz.tech/images/blog/20151101/step03.png" alt="ubuntu install step03"></li>
<li>在这一步中，默认中<code>清除整个磁盘并安装Ubuntu</code>，这个会自动的根据电脑内存等信息进行分区。我建议还是使用自定义分区，选择<code>其他选项</code>，再点击<code>继续</code>。<br><img src="http://img.zhaiyz.tech/images/blog/20151101/step04.png" alt="ubuntu install step04"><br><img src="http://img.zhaiyz.tech/images/blog/20151101/step05.png" alt="ubuntu install step05"></li>
<li>在这个页面，进行自定义分区，选中<code>/dev/sda</code>点击<code>新建分区表</code>，在弹出的提示框中选择<code>继续</code>。<br><img src="http://img.zhaiyz.tech/images/blog/20151101/step06.png" alt="ubuntu install step06"><br><img src="http://img.zhaiyz.tech/images/blog/20151101/step07.png" alt="ubuntu install step07"></li>
<li>选中<code>空闲</code>行，再点击下面的<code>+</code>。我一直以来的分区方式是，把所有空间都分区根目录，不分<code>swap</code>。挂载点选择<code>/</code>，点击<code>确定</code>。<br><img src="http://img.zhaiyz.tech/images/blog/20151101/step09.png" alt="ubuntu install step09"><br><img src="http://img.zhaiyz.tech/images/blog/20151101/step10.png" alt="ubuntu install step10"></li>
<li>在这个页面上选择<code>现在安装</code>，会提示没有分交换分区，点击<code>继续</code>。下一页面会提示是否将分区写入磁盘，选择<code>继续</code>。<br><img src="http://img.zhaiyz.tech/images/blog/20151101/step11.png" alt="ubuntu install step11"><br><img src="http://img.zhaiyz.tech/images/blog/20151101/step12.png" alt="ubuntu install step12"><br><img src="http://img.zhaiyz.tech/images/blog/20151101/step13.png" alt="ubuntu install step13"></li>
<li>这是一个选择时区的页面，默认就是<code>Shanghai</code>，就不做修改了，如果不是这个时区，就在地图上点一下，选择<code>Shanghai</code>，选择<code>继续</code>。<br><img src="http://img.zhaiyz.tech/images/blog/20151101/step14.png" alt="ubuntu install step14"></li>
<li>这是一个选择键盘布局的页面，保持默认，选择<code>继续</code>。<br><img src="http://img.zhaiyz.tech/images/blog/20151101/step15.png" alt="ubuntu install step15"></li>
<li>需要在这个页面填写上登录名以及密码信息，按自己的情况填写即可。密码太短会有警告，不管这个。点击<code>继续</code>。<br><img src="http://img.zhaiyz.tech/images/blog/20151101/step16.png" alt="ubuntu install step16"></li>
<li>之后就是自动安装的过程，不需要再进行配置。安装程序会根据之前配置的信息，把系统安装好。如果当前是连网状态，安装的过程中会下载一些包。但这些都是可以点击<code>Skip</code>跳过去。<br><img src="http://img.zhaiyz.tech/images/blog/20151101/step17.png" alt="ubuntu install step17"><br><img src="http://img.zhaiyz.tech/images/blog/20151101/step19.png" alt="ubuntu install step19"></li>
<li>等安装成功后，会出现下面这个界面进行提示。点击<code>现在重启</code>。<br><img src="http://img.zhaiyz.tech/images/blog/20151101/step22.png" alt="ubuntu install step22"></li>
<li>重启的过程中会提示把安装介质移出的提示，把光盘或u盘拿走后，敲击键盘上的<code>Enter</code>。<br><img src="http://img.zhaiyz.tech/images/blog/20151101/step23.png" alt="ubuntu install step23"></li>
<li>系统重启完成后会到登录页面，输入之前设定的密码，按<code>Enter</code>。然后就能进入到安装好的系统中。<br><img src="http://img.zhaiyz.tech/images/blog/20151101/step26.png" alt="ubuntu install step26"><br><img src="http://img.zhaiyz.tech/images/blog/20151101/step27.png" alt="ubuntu install step27"></li>
<li>Enjoy it。</li>
</ol>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title>变量命名缩写时的一些规律</title>
    <url>/2015/10/31/%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E7%BC%A9%E5%86%99%E6%97%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E8%A7%84%E5%BE%8B/</url>
    <content><![CDATA[<p>有代码的地方就有变量，命名的好坏能影响到代码的可读性甚至是代码质量。有的变量或是方法名、类名会很长，需要缩写下，看起来用起来都方便。</p>
<p>有些单词有约定俗成的缩写，比如说<code>message</code>可以缩写为<code>msg</code>，<code>button</code>缩写为<code>btn</code>，<code>description</code>缩写为<code>desc</code>。基本上是按音标，或是前几个字母来进行的。所以可以按这两种方式对变量进行缩写。缩写一般用3到5个字符，不用太短也不要太长。读音短的可以按变量中的重读字母来缩写，比如说<code>amount</code>可以缩写为<code>amt</code>，<code>class</code>缩写为<code>cls</code>。读音很多的，可以取前几个字母，比如说<code>organization</code>缩写为<code>org</code>，<code>institution</code>缩写为<code>inst</code>，<code>product</code>缩写为<code>prod</code>等。</p>
<p>过度的使用缩写也会影响到代码的可读性，也有一些项目中所有变量都不使用缩写。我看过一些spring的源码，开始的时候被那长长的命名给吓到了，像<code>FileSystemXmlApplicaionContext</code>，<code>DefaultAdvisorAdapterRegistry</code>之类的，但是一看就知道是什么意思，如果使用缩写可以写为<code>FileSysXmlAppCtx</code>这样的，写是方便了，但是可读性没有原来的好。</p>
<p>我认为对于缩写的使用，要有度，还要统一。一个项目中甚至一个公司内，可把使用到的变量缩写统一管理起来，代码中只准使用规定好的，这样就可以做到每个人代码中的变量都不会有岐义。不光是缩写，所有的命名都可以统一管理起来，用的时候优先使用规定好的。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>命名</tag>
        <tag>变量</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库中的竖表设计</title>
    <url>/2015/10/30/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E7%AB%96%E8%A1%A8%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>在开发中，经常会遇到一些很松散的属性，只有很少的对象会有，属性间也没有什么联系。如果设计到同一张表中，属性间的相关性又不大，设计成独立表又会有太多的表，也不值得。这时候如果设计一张竖表就能很好的解决这样的问题。</p>
<p>比如说有一表<code>User</code>表，它的扩展属性的竖表可以这样设计：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc UserAttribute;</span><br><span class="line">+-----------------+-------------+------+-----+---------+----------------+</span><br><span class="line">| Field           | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+-----------------+-------------+------+-----+---------+----------------+</span><br><span class="line">| userAttributeId | int(11)     | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| userId          | int(11)     | NO   |     | NULL    |                |</span><br><span class="line">| attributeKey    | varchar(20) | NO   |     | NULL    |                |</span><br><span class="line">| attributeValue  | varchar(50) | NO   |     | NULL    |                |</span><br><span class="line">| createDate      | datetime    | NO   |     | NULL    |                |</span><br><span class="line">| modifiedDate    | datetime    | YES  |     | NULL    |                |</span><br><span class="line">+-----------------+-------------+------+-----+---------+----------------+</span><br></pre></td></tr></table></figure>
<p>再在<code>userId</code>和<code>attributeKey</code>上面建立唯一索引，以提高效率，也保证数据完整性。其中<code>attributeKey</code>需要在代码中定义一个枚举，以说明其含义。使用时候时候定义一个<code>addOrUpdate(int userId, String attributeKey, String attributeValue)</code>方法和一个<code>getValue(int userId, String attributeKey)</code>方法。这样一个竖表的数据保存和读取功能就有了。</p>
<a id="more"></a>

<p>但有时候会有很多张表需要个辅助竖表，而且很张表里面的记录都不会很多。这时为每一张表设计一个竖表就又有点不值得了，可以设计一张通用的竖表来解决这个问题。这个表中用<code>tableName</code>加<code>recordId</code>来确定一条记录。表的结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc EntityAttribute;</span><br><span class="line">+-------------------+-------------+------+-----+---------+----------------+</span><br><span class="line">| Field             | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+-------------------+-------------+------+-----+---------+----------------+</span><br><span class="line">| entityAttributeId | int(11)     | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| tableName         | varchar(20) | NO   |     | NULL    |                |</span><br><span class="line">| recordId          | int(11)     | NO   |     | NULL    |                |</span><br><span class="line">| attributeKey      | varchar(20) | NO   |     | NULL    |                |</span><br><span class="line">| attributeValue    | varchar(50) | NO   |     | NULL    |                |</span><br><span class="line">| createDate        | datetime    | NO   |     | NULL    |                |</span><br><span class="line">| modifiedDate      | datetime    | YES  |     | NULL    |                |</span><br><span class="line">+-------------------+-------------+------+-----+---------+----------------+</span><br></pre></td></tr></table></figure>
<p>这样就实现了所有表共用一个竖表来保存属性。只是与单独一张表的竖表相比，多出一个<code>tableName</code>也要用个枚举来维护。保存和读取的时候，都要把<code>tableName</code>当作参数传进去。</p>
<p>如果使用竖表的属性值进行查询的时候，性能会有很大问题，所以尽量只用竖表做单条数据的保存和显示。当然可以使用key-value的nosql数据库来实现这种功能。</p>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>竖表</tag>
      </tags>
  </entry>
  <entry>
    <title>日志打印工具类</title>
    <url>/2015/10/29/%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<p>在开发的过程中，基本上都会使用到日志打印，一般是使用<code>sl4j</code>再加上<code>log4j</code>或是<code>logback</code>实现。使用的时候，直接用<code>sl4j</code>的接口方法。</p>
<p>在一个类中需要打印日志的时候，需要先定义一个对象，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Foo<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>然后再使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LOGGER.info(<span class="string">"some info message."</span>);</span><br></pre></td></tr></table></figure>
<p>有时候打印之前还需要加上判断打印等级是否启用的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">    LOGGER.debug(<span class="string">"some debug message."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在想要这样的一个方法，只要使用的时候，直接就用，不需要再在类中定义，打印级别也能自己判断再打印。思路是这样的，首先定义一个工具类，里面定义一个<code>Map</code>，以类名为key，以需要打印日志的类初始化的<code>Logger</code>对象为value。代码如下：</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Logger&gt; LOGGER_MAP = <span class="keyword">new</span> HashMap&lt;String, Logger&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Logger <span class="title">getLogger</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">    Logger logger = LOGGER_MAP.get(clazz.getName());</span><br><span class="line">    <span class="keyword">if</span> (logger == <span class="keyword">null</span>) &#123;</span><br><span class="line">        logger = LoggerFactory.getLogger(clazz);</span><br><span class="line">        LOGGER_MAP.put(clazz.getName(), logger);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> logger;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再在这个工具类中封装下打印日志的方法，以打印一个简单的info信息为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">(Class&lt;?&gt; clazz, String msg)</span> </span>&#123;</span><br><span class="line">    getLogger(clazz).info(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在其他类中打印日志的时候不需要定义，只需要调用工具类，再把要当前类和要打印的信息传过去就可以了，如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">LoggerHelper.info(Foo.class, "some info message");</span><br></pre></td></tr></table></figure>
<p>打印级别控制也可写在工具类中，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">(Class&lt;?&gt; clazz, String msg)</span> </span>&#123;</span><br><span class="line">    Logger logger = getLogger(clazz);</span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"some debug message."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用的时候，直接调用就可以了：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">LoggerHelper.info(Foo.class, "some debug message");</span><br></pre></td></tr></table></figure>
<p>当然以上只是两个打印方法，需要使用同样的方法把<code>sl4j</code>中的所有方法封装一下。</p>
<p>可以参考这个类：<a href="https://github.com/zhaiyz/logger-helper/blob/master/src/main/java/com/zhaiyz/LoggerHelper.java" target="_blank" rel="noopener">logger-helper
</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>Logger</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库中保存多种状态或类型时使用int还是varchar</title>
    <url>/2015/10/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E4%BF%9D%E5%AD%98%E5%A4%9A%E7%A7%8D%E7%8A%B6%E6%80%81%E6%88%96%E7%B1%BB%E5%9E%8B%E6%97%B6%E4%BD%BF%E7%94%A8int%E8%BF%98%E6%98%AFvarchar/</url>
    <content><![CDATA[<p>在数据库设计过程中，基本上都会遇到一些叫作<code>状态</code>、<code>类型</code>之类的字段。比如说一篇文章会有<code>草稿</code>、<code>已发布</code>、<code>删除</code>等状态。如果使用<code>int</code>来保存这个字段的话，可以是<code>0</code>表示<code>草稿</code>，<code>1</code>表示<code>已发布</code>，<code>2</code>表示<code>已删除</code>。如果使用<code>varchar</code>来保存的话，可以是<code>DRAFT</code>表示<code>草稿</code>，<code>PUBLISHED</code>表示<code>已发布</code>，<code>DELETED</code>表示<code>已删除</code>。</p>
<p>使用<code>int</code>会比<code>varchar</code>占用的空间会小，而且使用<code>tinyint</code>或<code>smallint</code>也就够用了。使用<code>varchar</code>的话，在查看数据库的数据的时候，会更加直观。一般在设计数据库的时候，会在字段的<code>comment</code>中写出可以使用到的值以及各个值对应的含义。所以<code>int</code>值虽然一下看不懂，可以再看到<code>comment</code>中的说明即可。如果在此字段上建立索引，也是<code>int</code>效率会高一些。</p>
<a id="more"></a>

<p>一般在开发的时候，会使用一个枚举来定义数据库保存的内容与实际含意的关系。这时使用<code>int</code>和<code>varchar</code>保存数据的区别会被封装起来。使用<code>int</code>时的枚举可能是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ArticleStatus &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 草稿 **/</span></span><br><span class="line">    DRAFT(<span class="number">0</span>, <span class="string">"草稿"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 已发布 **/</span></span><br><span class="line">    PUBLISHED(<span class="number">1</span>, <span class="string">"已发布"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 已删除 **/</span></span><br><span class="line">    DELETED(<span class="number">2</span>, <span class="string">"已删除"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> articleStatus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ArticleStatus</span><span class="params">(<span class="keyword">int</span> articleStatus, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.articleStatus = articleStatus;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他方法</span></span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用<code>varchar</code>时的枚举可能是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ArticleStatus &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 草稿 **/</span></span><br><span class="line">    DRAFT(<span class="string">"DRAFT"</span>, <span class="string">"草稿"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 已发布 **/</span></span><br><span class="line">    PUBLISHED(<span class="string">"PUBLISHED"</span>, <span class="string">"已发布"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 已删除 **/</span></span><br><span class="line">    DELETED(<span class="string">"DELETED"</span>, <span class="string">"已删除"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String articleStatus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ArticleStatus</span><span class="params">(String articleStatus, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.articleStatus = articleStatus;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他方法</span></span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用这两种类型的区别就是枚举中第一个字段是什么类型。在程序中使用的时候，会用<code>ArticleStatus.DRAFT</code>来表示<code>草稿</code>状态。与数据库中数据对应的时候会使用<code>ArticleStatus.DRAFT.getArticleStatus()</code>，当需要显示给用户看的时候会使用<code>ArticleStatus.DRAFT.getName()</code>。</p>
<p>在网上也看到过关于使用这两种类型的优缺点。一般来说是如果需要在字段上建立索引，推荐使用<code>int</code>。如果说只是保存，再显示用，可以用<code>varchar</code>。我认为这类状态或类型字段，基本上都会用来做查询条件，所以说还是都使用<code>int</code>来保存吧。</p>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>前后端完全分离时的权限管理</title>
    <url>/2015/10/27/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%AE%8C%E5%85%A8%E5%88%86%E7%A6%BB%E6%97%B6%E7%9A%84%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>本文介绍两种前后端完全分离时的权限管理的实现方式。</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于前后端完全分离，项目也是两个项目，就不能像在一个项目里面的时候，在生成html页面的时候，就知道哪些菜单或是按钮是当前用户可以看到的。这时就需要通过一些特殊方法来实现针对不同权限的用户显示不同的菜单或是按钮。</p>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>这里介绍两种实现方式，一种是偏前端控制的，另一种是偏后端控制的。</p>
<h3 id="前端控制"><a href="#前端控制" class="headerlink" title="前端控制"></a>前端控制</h3><ol>
<li>当用户登录成功的时候，同时返回用户拥有的角色和权限给前端，前端把这些数据当作全局数据保存。</li>
<li>定制指令，名称可以叫<code>has_role</code>和<code>has_permission</code>。</li>
<li>再在需要进行权限控制的菜单或是按钮显示的时候加上指令进行控制。如以下方式：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">has_role</span>=<span class="string">"admin"</span>&gt;</span>产品管理<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>参考文章 <a href="https://github.com/gnavarro77/angular-shiro" target="_blank" rel="noopener">angular-shiro</a></li>
</ol>
<h3 id="后端控制"><a href="#后端控制" class="headerlink" title="后端控制"></a>后端控制</h3><ol>
<li>当用户登录成功的时候，查询出用户可以看到的菜单资源，为一个树状结构，返回到前端。</li>
<li>前端再按得到的数据显示出菜单来。</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>无论哪种实现方式，后台都需要再对每个请求所需要的权限进行控制。</li>
<li>前端控制的可以粒度更细一些，可以控制到显示任何元素，后端控制的一般就控制下菜单的显示，到按钮等其他元素的显示就无能为力了。</li>
</ol>
]]></content>
      <categories>
        <category>方案</category>
      </categories>
      <tags>
        <tag>设计</tag>
        <tag>权限</tag>
      </tags>
  </entry>
  <entry>
    <title>收藏的文章列表</title>
    <url>/2014/09/19/collection-of-articles-01/</url>
    <content><![CDATA[<ol>
<li><a href="http://www.liferay.com/zh/community/wiki/-/wiki/Main/FriendlyURLMapper" target="_blank" rel="noopener">FriendlyURLMapper</a></li>
<li><a href="http://www.huqiwen.com/2013/05/30/liferay-6-1-development-study-20-advanced-dynamic-query/" target="_blank" rel="noopener">Dynamic Query高级查询</a></li>
<li><a href="http://www.liferay.com/zh/community/wiki/-/wiki/Main/Managing+Instances" target="_blank" rel="noopener">Managing Instances - 维基 | Liferay</a></li>
<li><a href="http://my.oschina.net/aiguozhe/blog/60526" target="_blank" rel="noopener">为Liferay运行提速</a></li>
<li><a href="http://www.liferay.com/zh/documentation/liferay-portal/6.1/user-guide/-/ai/performance-tuni-5" target="_blank" rel="noopener">Performance Tuning - User Guide | Liferay</a></li>
<li><a href="http://hi.baidu.com/yxklyn/item/8fbb2014df36cb19e65c36dc" target="_blank" rel="noopener">解决 Ubuntu 12.04 无法调节屏幕亮度的问题</a></li>
<li><a href="http://www.liferay.com/zh/documentation/liferay-portal/6.1/development/-/ai/overriding-a-j-4" target="_blank" rel="noopener">Overriding web resources - Development | Liferay</a></li>
<li><a href="http://kameshwar-singh.blogspot.com/2012/10/getting-httpservletrequest-and.html" target="_blank" rel="noopener">Getting HttpServletRequest and HttpServletResponse from portlet request</a></li>
<li><a href="http://www.helloweba.com/view-blog-226.html" target="_blank" rel="noopener">使用jquery.qrcode生成二维码</a></li>
<li><a href="http://www.linuxidc.com/Linux/2014-03/97968.htm" target="_blank" rel="noopener">SSH自动登录的几种方法</a></li>
<li><a href="http://www.liferay.com/zh/community/wiki/-/wiki/Main/Organization+administration#section-Organization+administration-Customizing+the+organization+types" target="_blank" rel="noopener">Organization administration - 维基 | Liferay</a></li>
<li><a href="http://www.cnblogs.com/hejiaquan/archive/2012/04/07/2435817.html" target="_blank" rel="noopener">两年后，再议“站内信”的实现</a></li>
<li><a href="http://liferay-hacks.blogspot.com/" target="_blank" rel="noopener">Liferay hacks</a></li>
<li><a href="http://www.liferay.com/zh/community/wiki/-/wiki/Main/How+to+configure+the+logs+in+Liferay/" target="_blank" rel="noopener">Configuring Logs - 维基 | Liferay</a></li>
<li><a href="http://liferay-blogging.blogspot.com/2011/03/dynamicquery-api-and-classloaders-in.html" target="_blank" rel="noopener">A Blog about Liferay, JSF, ICEFaces and Primefaces: DynamicQuery API and ClassLoaders in Liferay</a><a id="more"></a></li>
<li><a href="https://www.liferay.com/zh/web/bavithra.rajendran/blog/-/blogs/liferay-6-1-and-sass" target="_blank" rel="noopener">Liferay 6.1 and SASS - Blog | Liferay</a></li>
<li><a href="http://www.liferay.com/zh/community/wiki/-/wiki/Main/Access+Objects+from+Velocity" target="_blank" rel="noopener">Access Objects from Velocity - 维基 | Liferay</a></li>
<li><a href="http://userinterfaceandme.wordpress.com/2012/02/22/105/" target="_blank" rel="noopener">Velocity – Check if given string contains a specific sub string.</a></li>
<li><a href="http://www.tillage.net/the-markdown-language-used-by-github/" target="_blank" rel="noopener">Github 使用的Markdown语言</a></li>
<li><a href="http://www.csdn.net/article/2014-06-10/2820160" target="_blank" rel="noopener">MySQL在大型网站的应用架构演变</a></li>
<li><a href="https://www.liferay.com/zh/documentation/liferay-portal/6.0/development/-/ai/javascript" target="_blank" rel="noopener">JavaScript - Development | Liferay</a></li>
<li><a href="http://www.c-sharpcorner.com/UploadFile/433c33/rounding-mode-of-integer-in-java/" target="_blank" rel="noopener">Rounding Mode of Numeric in Java</a></li>
<li><a href="https://www.liferay.com/zh/community/forums/-/message_boards/message/28211998" target="_blank" rel="noopener">liferay-ui:icon image attribute - 论坛 | Liferay</a></li>
<li><a href="http://www.liferaysolution.com/2011/12/alloy-ui-taglibs.html" target="_blank" rel="noopener">Alloy UI taglibs - Liferay Solutions</a></li>
<li><a href="http://freemarker.org/docs/ref_reservednames.html" target="_blank" rel="noopener">FreeMarker Manual - Reserved names in FTL</a></li>
<li><a href="http://freemarker.org/docs/ref_directive_list.html" target="_blank" rel="noopener">FreeMarker Manual - list, break</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-12-04" target="_blank" rel="noopener">How To Add Swap on Ubuntu 12.04</a></li>
<li><a href="http://askubuntu.com/questions/126018/adding-a-new-swap-file-how-to-edit-fstab-to-enable-swap-after-reboot" target="_blank" rel="noopener">12.04 - Adding a new swap file. How to edit fstab to enable swap after reboot? - Ask Ubuntu</a></li>
<li><a href="http://yuanrufeng.cn/post/151" target="_blank" rel="noopener">如何在CentOS系统中安装字体</a></li>
<li><a href="http://www.cnblogs.com/huang0925/p/3254243.html" target="_blank" rel="noopener">SVN中Branch的创建与合并</a></li>
<li><a href="https://www.liferay.com/zh/community/wiki/-/wiki/Main/Document+Conversion+with+OpenOffice" target="_blank" rel="noopener">Document Conversion with OpenOffice - 维基 | Liferay</a></li>
<li><a href="http://blog.jobbole.com/73257/" target="_blank" rel="noopener">BASH的保护性编程技巧</a></li>
<li><a href="http://www.cnblogs.com/live365wang/archive/2011/03/24/1993738.html" target="_blank" rel="noopener">Java身份证验证方法</a></li>
<li><a href="https://wiki.ubuntu.com/Bumblebee" target="_blank" rel="noopener">Bumblebee - Ubuntu Wiki</a></li>
<li><a href="http://simonecarletti.com/blog/2009/07/configuring-git-repository-with-redmine/" target="_blank" rel="noopener">Configuring a Git repository with Redmine</a></li>
<li><a href="http://www.redmine.org/projects/redmine/wiki/HowTo_keep_in_sync_your_git_repository_for_redmine" target="_blank" rel="noopener">HowTo keep in sync your git repository for redmine - Redmine</a></li>
<li><a href="http://www.cnblogs.com/BeginMan/p/3548139.html" target="_blank" rel="noopener">git初体验（七）多账户的使用</a></li>
<li><a href="http://yanmingming.sinaapp.com/?p=991" target="_blank" rel="noopener">Jenkins 配置 Git 关联代码</a></li>
<li><a href="http://www.cnblogs.com/mackxu/p/ssh-keygen.html" target="_blank" rel="noopener">多个github帐号的SSH key切换</a></li>
<li><a href="http://stackoverflow.com/questions/15174194/jenkins-host-key-verification-failed" target="_blank" rel="noopener">Jenkins Host key verification failed</a></li>
<li><a href="http://zengrong.net/post/1544.htm" target="_blank" rel="noopener">修改了SSH默认端口之后，如何配置git？</a></li>
<li><a href="http://wiki.eclipse.org/EGit/FAQ#What_versions_of_Eclipse_does_EGit_target.3F" target="_blank" rel="noopener">EGit/FAQ - Eclipsepedia</a></li>
<li><a href="http://www.freehao123.com/startssl-ssl/" target="_blank" rel="noopener">StartSSL免费SSL证书成功申请-HTTPS让访问网站更安全</a></li>
<li><a href="http://maven.apache.org/scm/git.html" target="_blank" rel="noopener">Apache Maven SCM - SCM Implementation: Git</a></li>
<li><a href="http://www.freehao123.com/nginx-startssl/" target="_blank" rel="noopener">Nginx,Cpanel,DirectAdmin安装StartSSL免费SSL证书</a></li>
<li><a href="http://linux.cn/article-3661-1.html" target="_blank" rel="noopener">迷渡：免费的编程中文书籍索引 - 分享</a></li>
<li><a href="http://www.thymeleaf.org/" target="_blank" rel="noopener">Thymeleaf: java XML/XHTML/HTML5 template engine</a></li>
<li><a href="https://www.gitbook.io/" target="_blank" rel="noopener">GitBook · Write &amp; Publish Books</a></li>
<li><a href="http://alistapart.com/article/responsive-web-design" target="_blank" rel="noopener">Responsive Web Design · An A List Apart Article</a></li>
<li><a href="http://www.bootcss.com/p/lesscss/" target="_blank" rel="noopener">LESS « 一种动态样式语言</a></li>
<li><a href="http://v3.bootcss.com/" target="_blank" rel="noopener">Bootstrap 中文文档</a></li>
<li><a href="http://blog.jobbole.com/76500/" target="_blank" rel="noopener">跟着 8 张思维导图学习 Javascript</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/06/sass.html" target="_blank" rel="noopener">SASS用法指南 - 阮一峰的网络日志</a></li>
<li><a href="http://fortawesome.github.io/Font-Awesome/" target="_blank" rel="noopener">Font Awesome, the iconic font and CSS toolkit</a></li>
<li><a href="http://code.kik.com/app/2/index.html" target="_blank" rel="noopener">App.js | Mobile webapps made easy</a></li>
<li><a href="http://phonegap.com/" target="_blank" rel="noopener">PhoneGap | Home</a></li>
<li><a href="https://kickass.to/" target="_blank" rel="noopener">下载种子，快速且免费的种子下载 - KickassTorrents</a></li>
<li><a href="http://ionicframework.com/" target="_blank" rel="noopener">Ionic: Advanced HTML5 Hybrid Mobile App Framework</a></li>
<li><a href="https://www.centos.bz/2011/05/linux-centos-xen-pptp-vpn-install/" target="_blank" rel="noopener">Linux CentOS pptp vpn一键安装包</a></li>
<li><a href="http://charlie928.blog.51cto.com/3741218/1433950" target="_blank" rel="noopener">vps搭建加密squid+stunnel</a></li>
<li><a href="http://my.oschina.net/blindcat/blog/169657" target="_blank" rel="noopener">CentOS 6 iptables 开放端口80 3306 22等</a></li>
</ol>
]]></content>
      <categories>
        <category>默认分类</category>
      </categories>
      <tags>
        <tag>liferay</tag>
        <tag>links</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>liferay-theme defineObjects</title>
    <url>/2014/05/04/liferay-theme-define-objects/</url>
    <content><![CDATA[<blockquote>
<p>在jsp中添加<code>&lt;liferay-theme:defineObjects /&gt;</code>之后，可以使用的对象。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ThemeDisplay themeDisplay</span><br><span class="line">Company company</span><br><span class="line">Account account</span><br><span class="line">User user</span><br><span class="line">User realUser</span><br><span class="line">Contact contact</span><br><span class="line">Layout layout</span><br><span class="line">List&lt;Layout&gt; layouts</span><br><span class="line"><span class="keyword">long</span> plid</span><br><span class="line">LayoutTypePortlet layoutTypePortlet</span><br><span class="line"><span class="keyword">long</span> scopeGroupId</span><br><span class="line">PermissionChecker permissionChecker</span><br><span class="line">Locale locale</span><br><span class="line">TimeZone timeZone</span><br><span class="line">Theme theme</span><br><span class="line">ColorScheme colorScheme</span><br><span class="line">PortletDisplay portletDisplay</span><br><span class="line"><span class="keyword">long</span> portletGroupId</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>其核心就只有themeDisplay，其余都是通过themeDisplay获得的。以下为<code>DefineObjectsTag.java</code>部分源码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doStartTag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();</span><br><span class="line"></span><br><span class="line">    ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (themeDisplay != <span class="keyword">null</span>) &#123;</span><br><span class="line">        pageContext.setAttribute(<span class="string">"themeDisplay"</span>, themeDisplay);</span><br><span class="line">        pageContext.setAttribute(<span class="string">"company"</span>, themeDisplay.getCompany());</span><br><span class="line">        pageContext.setAttribute(<span class="string">"account"</span>, themeDisplay.getAccount());</span><br><span class="line">        pageContext.setAttribute(<span class="string">"user"</span>, themeDisplay.getUser());</span><br><span class="line">        pageContext.setAttribute(<span class="string">"realUser"</span>, themeDisplay.getRealUser());</span><br><span class="line">        pageContext.setAttribute(<span class="string">"contact"</span>, themeDisplay.getContact());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (themeDisplay.getLayout() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            pageContext.setAttribute(<span class="string">"layout"</span>, themeDisplay.getLayout());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (themeDisplay.getLayouts() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            pageContext.setAttribute(<span class="string">"layouts"</span>, themeDisplay.getLayouts());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pageContext.setAttribute(<span class="string">"plid"</span>, <span class="keyword">new</span> Long(themeDisplay.getPlid()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (themeDisplay.getLayoutTypePortlet() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            pageContext.setAttribute(<span class="string">"layoutTypePortlet"</span>, themeDisplay.getLayoutTypePortlet());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pageContext.setAttribute(<span class="string">"scopeGroupId"</span>, <span class="keyword">new</span> Long(themeDisplay.getScopeGroupId()));</span><br><span class="line">        pageContext.setAttribute(<span class="string">"permissionChecker"</span>, themeDisplay.getPermissionChecker());</span><br><span class="line">        pageContext.setAttribute(<span class="string">"locale"</span>, themeDisplay.getLocale());</span><br><span class="line">        pageContext.setAttribute(<span class="string">"timeZone"</span>, themeDisplay.getTimeZone());</span><br><span class="line">        pageContext.setAttribute(<span class="string">"theme"</span>, themeDisplay.getTheme());</span><br><span class="line">        pageContext.setAttribute(<span class="string">"colorScheme"</span>, themeDisplay.getColorScheme());</span><br><span class="line">        pageContext.setAttribute(<span class="string">"portletDisplay"</span>, themeDisplay.getPortletDisplay());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Deprecated</span></span><br><span class="line"></span><br><span class="line">        pageContext.setAttribute(<span class="string">"portletGroupId"</span>, <span class="keyword">new</span> Long(themeDisplay.getScopeGroupId()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> SKIP_BODY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ol>
<li><a href="http://www.liferay.com/zh/community/forums/-/message_boards/message/5997940" target="_blank" rel="noopener">Portlet:DefineObjects tag in jsp</a></li>
<li><a href="http://blog.csdn.net/wenyitao880901/article/details/6181129" target="_blank" rel="noopener">liferay 在jsp中直接使用的对象</a></li>
</ol>
<p>–<strong>EOF</strong>–</p>
]]></content>
      <categories>
        <category>liferay</category>
      </categories>
      <tags>
        <tag>liferay</tag>
        <tag>tags</tag>
      </tags>
  </entry>
  <entry>
    <title>使用springmvc开发portlet</title>
    <url>/2014/04/21/development-of-a-sample-portlet-with-springmvc/</url>
    <content><![CDATA[<blockquote>
<p>本文将介绍使用springmvc开发一个portlet。项目全部代码已托管在github，地址为：<a href="https://github.com/zhaiyz/springmvc-portlet" target="_blank" rel="noopener">https://github.com/zhaiyz/springmvc-portlet</a></p>
</blockquote>
<h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ul>
<li>OS：ubuntu 12.04 64位</li>
<li>Liferay Portal：6.2 CE GA2(6.2.1)</li>
<li>JDK：1.6.0_45</li>
<li>Maven：3.0.5</li>
<li>Eclipse：3.7.2(indigo)</li>
<li>Spring：3.2.4.RELEASE</li>
</ul>
<h3 id="创建一个portlet"><a href="#创建一个portlet" class="headerlink" title="创建一个portlet"></a>创建一个portlet</h3><p>依照<a href="http://zhaiyz.com/2014/04/11/use-eclipse-develop-liferay-with-maven/">使用eclipse开发liferay maven项目</a>中的方法，创建一个名为<code>springmvc-portlet</code>的portlet。</p>
<h3 id="添加springmvc-portlet依赖"><a href="#添加springmvc-portlet依赖" class="headerlink" title="添加springmvc-portlet依赖"></a>添加springmvc-portlet依赖</h3><p>在<code>pom.xml</code>中添加<code>spring-webmvc-portlet</code>依赖，以及<code>jstl</code>依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc-portlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="添加web-xml配置"><a href="#添加web-xml配置" class="headerlink" title="添加web.xml配置"></a>添加web.xml配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"2.4"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ViewRendererServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.ViewRendererServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ViewRendererServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/WEB-INF/servlet/view<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建SpringMvcPortletController"><a href="#创建SpringMvcPortletController" class="headerlink" title="创建SpringMvcPortletController"></a>创建<code>SpringMvcPortletController</code></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhaiyz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.portlet.RenderRequest;</span><br><span class="line"><span class="keyword">import</span> javax.portlet.RenderResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.portlet.bind.annotation.RenderMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringMvcPortletController</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaiyz</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"VIEW"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringMvcPortletController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RenderMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showForm</span><span class="params">(RenderRequest request, RenderResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"view"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建springmvc-portlet-xml"><a href="#创建springmvc-portlet-xml" class="headerlink" title="创建springmvc-portlet.xml"></a>创建springmvc-portlet.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/context/spring-context-3.2.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zhaiyz"</span> /&gt;</span>  </span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="修改portlet-xml"><a href="#修改portlet-xml" class="headerlink" title="修改portlet.xml"></a>修改portlet.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">portlet-app</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/portlet/portlet-app_2_0.xsd"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/portlet/portlet-app_2_0.xsd http://java.sun.com/xml/ns/portlet/portlet-app_2_0.xsd"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">version</span>=<span class="string">"2.0"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">portlet</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">portlet-name</span>&gt;</span>springmvc-portlet<span class="tag">&lt;/<span class="name">portlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">display-name</span>&gt;</span>springmvc-portlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">portlet-class</span>&gt;</span>org.springframework.web.portlet.DispatcherPortlet<span class="tag">&lt;/<span class="name">portlet-class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:springmvc-portlet.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">expiration-cache</span>&gt;</span>0<span class="tag">&lt;/<span class="name">expiration-cache</span>&gt;</span></span><br><span class="line">		.</span><br><span class="line">        .</span><br><span class="line">        .</span><br><span class="line">	<span class="tag">&lt;/<span class="name">portlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">portlet-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建jsp目录及view-jsp文件"><a href="#创建jsp目录及view-jsp文件" class="headerlink" title="创建jsp目录及view.jsp文件"></a>创建jsp目录及view.jsp文件</h3><p>在<code>WEB-INF</code>下创建<code>jsp</code>目录，并把自动创建的在<code>webapp</code>目录下的<code>view.jsp</code>移动到<code>jsp</code>目录。此时，项目的目录结构如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br><span class="line">    └── main</span><br><span class="line">        ├── java</span><br><span class="line">        │   └── com</span><br><span class="line">        │       └── zhaiyz</span><br><span class="line">        │           └── SpringMvcPortletController.java</span><br><span class="line">        ├── resources</span><br><span class="line">        │   └── springmvc-portlet.xml</span><br><span class="line">        └── webapp</span><br><span class="line">            ├── css</span><br><span class="line">            │   └── main.css</span><br><span class="line">            ├── icon.png</span><br><span class="line">            ├── js</span><br><span class="line">            │   └── main.js</span><br><span class="line">            └── WEB-INF</span><br><span class="line">                ├── jsp</span><br><span class="line">                │   └── view.jsp</span><br><span class="line">                ├── liferay-display.xml</span><br><span class="line">                ├── liferay-plugin-package.properties</span><br><span class="line">                ├── liferay-portlet.xml</span><br><span class="line">                ├── portlet.xml</span><br><span class="line">                └── web.xml</span><br><span class="line"></span><br><span class="line">11 directories, 12 files</span><br></pre></td></tr></table></figure>

<h3 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn clean pakcage liferay:deploy</span><br></pre></td></tr></table></figure>
<p>启动tomcat，启动完成后。可应用程序的示例分类中找到新创建的portlet，名为<code>springmvc-portlet</code>。添加此portlet到页面，可以看到如下显示效果。<br><img src="http://img.zhaiyz.tech/images/blog/20140421/springmvc_portlet.png" alt="springmvc_portlet"></p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ol>
<li><a href="http://blogs.isostech.com/portlet-development/development-simple-portlet-spring-mvc/" target="_blank" rel="noopener">Development of a Simple Portlet with SpringMVC</a></li>
<li><a href="http://www.huqiwen.com/2013/01/10/liferay-6-1-development-study-17-springmvc-portlet/" target="_blank" rel="noopener">Liferay 6.1开发学习（十七）：基于注解的SpringMVC portlet开发</a></li>
<li><a href="http://www.mkyong.com/jsf2/java-lang-classnotfoundexception-javax-servlet-jsp-jstl-core-config/" target="_blank" rel="noopener">java.lang.ClassNotFoundException : javax.servlet.jsp.jstl.core.Config</a></li>
</ol>
<p>–<strong>EOF</strong>–</p>
]]></content>
      <categories>
        <category>liferay</category>
      </categories>
      <tags>
        <tag>liferay</tag>
        <tag>portlet</tag>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>BigDecimal类型数据大小比较</title>
    <url>/2014/04/17/bigdecimal-equals-compareto/</url>
    <content><![CDATA[<blockquote>
<p>在进行精确数值计算时，需要使用<code>BigDecimal</code>类型。本文将介绍<code>BigDecimal</code>类型的比较。</p>
</blockquote>
<h3 id="使用equals和compareTo比较两个BigDecimal类型数据"><a href="#使用equals和compareTo比较两个BigDecimal类型数据" class="headerlink" title="使用equals和compareTo比较两个BigDecimal类型数据"></a>使用equals和compareTo比较两个<code>BigDecimal</code>类型数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigDecimalDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		BigDecimal bd1 = <span class="keyword">new</span> BigDecimal(<span class="string">"2.10"</span>);</span><br><span class="line">		BigDecimal bd2 = <span class="keyword">new</span> BigDecimal(<span class="string">"2.1"</span>);</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">"bd1 equals bd2: "</span> + bd1.equals(bd2));</span><br><span class="line">		System.out.println(<span class="string">"bd1 compareTo bd2: "</span> + bd1.compareTo(bd2));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">bd1 equals bd2: <span class="keyword">false</span></span><br><span class="line">bd1 compareTo bd2: <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>由结果可以看出<code>equals</code>方法会比较两个数据的<code>scale</code>(精度)，而<code>compareTo</code>是对两个数据的数值进行比较，不比较它们的<code>scale</code>。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在电子商务中进行价格计算的时候经常会使用到此种数据，进行两个价格进行比较时，需要使用<code>compareTo</code>。</p>
<p>–<strong>EOF</strong>–</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>bigdecimal</tag>
      </tags>
  </entry>
  <entry>
    <title>取得一个单例的三种方式</title>
    <url>/2014/04/15/obtain-a-singleton-in-three-ways/</url>
    <content><![CDATA[<blockquote>
<p>开发中经常需要获取一个单例的对象。本文将介绍得到单例对象的方法。</p>
</blockquote>
<h3 id="Early-Initialization"><a href="#Early-Initialization" class="headerlink" title="Early Initialization"></a>Early Initialization</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonEarly</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> SingletonEarly instance = <span class="keyword">new</span> SingletonEarly();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SingletonEarly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonEarly <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SingletonEarly.getInstance();</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="Lazy-Initialization"><a href="#Lazy-Initialization" class="headerlink" title="Lazy Initialization"></a>Lazy Initialization</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonLazy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> SingletonLazy instance;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SingletonLazy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// Suppressing creating a new instances</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonLazy <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">synchronized</span> (SingletonLazy<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">				<span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">					instance = <span class="keyword">new</span> SingletonLazy();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SingletonLazy.getInstance();</span><br></pre></td></tr></table></figure>

<h3 id="Enum-Singleton"><a href="#Enum-Singleton" class="headerlink" title="Enum Singleton"></a>Enum Singleton</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SingletonEnum &#123;</span><br><span class="line">	</span><br><span class="line">	INSTANCE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SingletonEnum.INSTANCE;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>单例模式中，使用枚举是最好的方式，原因可以参考<a href="http://www.importnew.com/6461.html" target="_blank" rel="noopener">单例模式中为什么用枚举更好</a>。不过需要JDK1.5或以上版本支持。</p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ol>
<li><a href="http://coderevisited.com/singleton/" target="_blank" rel="noopener">Singleton</a></li>
</ol>
<p>–<strong>EOF</strong>–</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>singleton</tag>
      </tags>
  </entry>
  <entry>
    <title>测试一个整数是否为偶数</title>
    <url>/2014/04/14/test-number-is-even-or-not/</url>
    <content><![CDATA[<blockquote>
<p>一般判断奇偶数是用<code>num % 2 == 0</code>来判断，如果为true则为偶数，为false则为奇数。还有一种通过位运算进行判断的方法，原理是偶数在二进制里面，最后一位为0，奇数则为1。所以可以通过与1做位与运算判断奇偶数。即<code>(num &amp; 1) == 0</code>如果结果为true则为偶数，为false则为奇数。效率比取余运算高的多。 以下为测试代码。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Even</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"1 is even: "</span> + isEven(<span class="number">1</span>));</span><br><span class="line">		System.out.println(<span class="string">"2 is even: "</span> + isEven(<span class="number">2</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEven</span> <span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (num &amp; <span class="number">1</span>) == <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果为：</span><br><span class="line"><span class="number">1</span> is even: <span class="keyword">false</span></span><br><span class="line"><span class="number">2</span> is even: <span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<p>–<strong>EOF</strong>–</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>even</tag>
      </tags>
  </entry>
  <entry>
    <title>一些ubuntu软件</title>
    <url>/2014/04/13/some-ubuntu-softwares/</url>
    <content><![CDATA[<blockquote>
<p>本文将介绍我安装过的一些ubuntu软件。</p>
</blockquote>
<ol>
<li>Indicator China Weather <a href="https://launchpad.net/indicator-china-weather" target="_blank" rel="noopener">https://launchpad.net/indicator-china-weather</a></li>
<li>Chinese calendar <a href="https://launchpad.net/chinese-calendar" target="_blank" rel="noopener">https://launchpad.net/chinese-calendar</a></li>
<li>dbeaver <a href="http://dbeaver.jkiss.org/download/" target="_blank" rel="noopener">http://dbeaver.jkiss.org/download/</a></li>
<li>CherryTree <a href="http://www.giuspen.com/cherrytree/" target="_blank" rel="noopener">http://www.giuspen.com/cherrytree/</a></li>
<li>Pidgin</li>
<li>pidgin-lwqq <a href="https://github.com/xiehuc/pidgin-lwqq" target="_blank" rel="noopener">https://github.com/xiehuc/pidgin-lwqq</a></li>
<li>FileZilla</li>
<li>GDebi</li>
<li>WizNote</li>
<li>Liferea</li>
<li>OpenFetion</li>
<li>Ubuntu Tweak <a href="http://ubuntu-tweak.com" target="_blank" rel="noopener">http://ubuntu-tweak.com</a></li>
<li>SecureCRT <a href="http://www.vandyke.com/download/securecrt/download.html" target="_blank" rel="noopener">http://www.vandyke.com/download/securecrt/download.html</a></li>
<li>115云备份</li>
<li>chmsee</li>
<li>dconf editor</li>
<li>K3b</li>
<li>Meld</li>
<li>ClassicMenu Indicator <a href="http://www.florian-diesch.de/software/classicmenu-indicator/" target="_blank" rel="noopener">http://www.florian-diesch.de/software/classicmenu-indicator/</a></li>
<li>MultiBit <a href="https://multibit.org/" target="_blank" rel="noopener">https://multibit.org/</a></li>
<li>ProjectLibre <a href="http://www.projectlibre.com/" target="_blank" rel="noopener">http://www.projectlibre.com/</a></li>
<li>Shutter <a href="http://shutter-project.org" target="_blank" rel="noopener">http://shutter-project.org</a></li>
<li>Sqliteman</li>
<li>terminator</li>
<li>VirtualBox</li>
<li>VLC</li>
<li>Sublime Text 2</li>
</ol>
<p>–<strong>EOF</strong>–</p>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>software</tag>
      </tags>
  </entry>
  <entry>
    <title>把博客从wordpress中迁移到hexo中</title>
    <url>/2014/04/12/migrator-blogs-from-wordpress-to-hexo/</url>
    <content><![CDATA[<blockquote>
<p>由于之前用wordpress写过博客，现在在用hexo。想把之前的博客迁移到hexo中，而且hexo也有这样的插件。本文将介绍迁移方法。</p>
</blockquote>
<h3 id="安装WordPress-migrator插件"><a href="#安装WordPress-migrator插件" class="headerlink" title="安装WordPress migrator插件"></a>安装WordPress migrator插件</h3><p>执行以下命令，安装WordPress migrator插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-migrator-wordpress --save</span><br></pre></td></tr></table></figure>

<h3 id="从wordpress中导出文章"><a href="#从wordpress中导出文章" class="headerlink" title="从wordpress中导出文章"></a>从wordpress中导出文章</h3><p>登录wordpress管理控制台，选择工具-&gt;导出，再选择文章[如下图]。点击下载导出的文件，就可以得到一个名称类似<code>wordpress.2014-04-12.xml</code>的文件。</p>
<p><img src="http://img.zhaiyz.tech/images/blog/20140412/wordpress_export.png" alt="wordpress_export"></p>
<a id="more"></a>

<h3 id="把文章导入到hexo"><a href="#把文章导入到hexo" class="headerlink" title="把文章导入到hexo"></a>把文章导入到hexo</h3><p>在hexo生成的站点目录，即hexo init &lt;站点目录&gt;中的站点目录。执行以下命令，source为上一步中导出的类似<code>wordpress.2014-04-12.xml</code>文件全路径。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo migrate wordpress <span class="built_in">source</span></span><br></pre></td></tr></table></figure>
<p>执行完成之后，在站点目录-&gt;source-&gt;_posts目录中，就可以看到导入的文章。</p>
<h3 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h3><p>此插件功能很是强大，不光文章标题，内容能够迁移过来，文章的写作日期，包含的标签，所属的分类也可以自动导入。文章内容的格式也可以转换为markdown格式。需要修改的地方只是包含代码的部分。wordpress中使用的是Syntax Highlighter，代码段是用类似[java][/java]的标签包围起来的，换成用前后各三个<code></code> `包含起来即可。本站的14年之前的文章都是利用此方法导入进来的。</p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ol>
<li><a href="https://github.com/hexojs/hexo-migrator-wordpress" target="_blank" rel="noopener">https://github.com/hexojs/hexo-migrator-wordpress</a></li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>使用eclipse开发liferay maven项目</title>
    <url>/2014/04/11/use-eclipse-develop-liferay-with-maven/</url>
    <content><![CDATA[<p>本文将介绍使用eclipse开发liferay maven项目。</p>
<blockquote>
<p>之前用sublime text写过一些liferay代码，但是很不方便，主要是进行包引入时和使用方法进行提示时。所以以后还是使用eclipse进行开发。</p>
</blockquote>
<h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ul>
<li>OS：ubuntu 12.04 64位</li>
<li>Liferay Portal：6.2 CE GA2(6.2.1)</li>
<li>JDK：1.6.0_45</li>
<li>Maven：3.0.5</li>
<li>Eclipse：3.7.2(indigo)</li>
</ul>
<h3 id="创建maven项目"><a href="#创建maven项目" class="headerlink" title="创建maven项目"></a>创建maven项目</h3><blockquote>
<p>liferay 6.2.1相关的archetypes已经在4月2号更新到了maven中央库，所以如果平时把maven启动时更新库索引的选项去掉的话，需要选上[如下图]再重启eclipse，这样就可以更新最到新的索引。</p>
</blockquote>
<a id="more"></a>
<p><img src="http://img.zhaiyz.tech/images/blog/20140411/maven_preferences.png" alt="maven_preferences"><br>完成以上操作后在eclipse中新建一个maven project，在<code>Select an Archetype</code>页面的Filter中输入<code>liferay</code>即可检索出liferay相关的archtypes。但是在我本机，虽然更新到了最新的索引，看到的最新的liferay archtypes的版本却是<code>6.2.0-M6</code>。</p>
<p><img src="http://img.zhaiyz.tech/images/blog/20140411/maven_liferay_archtypes.png" alt="maven_liferay_archtypes"></p>
<h4 id="添加liferay私有Catalog"><a href="#添加liferay私有Catalog" class="headerlink" title="添加liferay私有Catalog"></a>添加liferay私有Catalog</h4><p>为了使用最新的archtype，需要添加liferay官网提供的catalog。方法如下，在上图中点击<code>Configure</code>按钮，或选择Window-&gt;Preferences-&gt;Maven-&gt;Archtypes。再点击<code>Add Remote Catalog</code>按钮。在弹出的对话框中。添加<code>https://repository.liferay.com/nexus/content/groups/liferay-ce/archetype-catalog.xml</code>到<code>Catelog File</code>栏中，<code>Description</code>可以自定义，本机使用<code>liferay-ce-archtype-catalog</code>[如下图]。填写完成后，点击OK按钮保存。</p>
<p><img src="http://img.zhaiyz.tech/images/blog/20140411/maven_archtypes_liferay_catalog.png" alt="maven_archtypes_liferay_catalog"></p>
<h4 id="创建liferay项目"><a href="#创建liferay项目" class="headerlink" title="创建liferay项目"></a>创建liferay项目</h4><p>重新回到创建maven项目界面，Catelog下拉框中选择刚添加的<code>liferay-ce-archtype-catalog</code>，Fileter输入<code>liferay</code>，同时还需要把<code>Show the last version of Archtype only</code>选项去掉，不然的话，只会显示最新的版本。在列出的可先archtype中，选择Artifact Id为<code>liferay-portlet-archtype</code>，Version选择<code>6.2.1</code>[如下图]。</p>
<p><img src="http://img.zhaiyz.tech/images/blog/20140411/maven_archtypes_liferay_6.2.1.png" alt="maven_archtypes_liferay_6.2.1"></p>
<p>完成以上操作之后，点击Next按钮进入<code>Specify Archetype parameters</code>界面。根据需求，添加好Group Id，Artifact Id等信息，本文使用配置[如下图]。</p>
<p><img src="http://img.zhaiyz.tech/images/blog/20140411/maven_liferay_demo.png" alt="maven_liferay_demo"></p>
<p>填写好配置之后，点击Finish，eclipse就会根据选定的archtype和配置创建好一个项目。项目目录结构如下，其中target目录是自动出成的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── pom.xml</span><br><span class="line">├── src</span><br><span class="line">│   ├── main</span><br><span class="line">│   │   ├── java</span><br><span class="line">│   │   ├── resources</span><br><span class="line">│   │   └── webapp</span><br><span class="line">│   │       ├── css</span><br><span class="line">│   │       │   └── main.css</span><br><span class="line">│   │       ├── icon.png</span><br><span class="line">│   │       ├── js</span><br><span class="line">│   │       │   └── main.js</span><br><span class="line">│   │       ├── view.jsp</span><br><span class="line">│   │       └── WEB-INF</span><br><span class="line">│   │           ├── liferay-display.xml</span><br><span class="line">│   │           ├── liferay-plugin-package.properties</span><br><span class="line">│   │           ├── liferay-portlet.xml</span><br><span class="line">│   │           ├── portlet.xml</span><br><span class="line">│   │           └── web.xml</span><br><span class="line">│   └── <span class="built_in">test</span></span><br><span class="line">│       └── java</span><br><span class="line">└── target</span><br><span class="line">    ├── classes</span><br><span class="line">    ├── m2e-wtp</span><br><span class="line">    │   └── web-resources</span><br><span class="line">    │       └── META-INF</span><br><span class="line">    │           └── maven</span><br><span class="line">    │               └── com.zhaiyz</span><br><span class="line">    │                   └── demo</span><br><span class="line">    │                       ├── pom.properties</span><br><span class="line">    │                       └── pom.xml</span><br><span class="line">    └── <span class="built_in">test</span>-classes</span><br><span class="line"></span><br><span class="line">19 directories, 12 files</span><br></pre></td></tr></table></figure>

<h4 id="配置pom-xml"><a href="#配置pom-xml" class="headerlink" title="配置pom.xml"></a>配置pom.xml</h4><p>添加以下配置到pom.xml中，主要是指定项目中的使用liferay及liferay maven plugin版本，liferay运行环境的相关路径，以及把库和插件库指向liferay官网。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指向自己的LP_HOME --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">liferay.home</span>&gt;</span>/home/zhaiyz/develop/liferay-portal-6.2.0-ce-ga1<span class="tag">&lt;/<span class="name">liferay.home</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">liferay.auto.deploy.dir</span>&gt;</span>$&#123;liferay.home&#125;/deploy<span class="tag">&lt;/<span class="name">liferay.auto.deploy.dir</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">liferay.app.server.deploy.dir</span>&gt;</span>$&#123;liferay.home&#125;/tomcat-7.0.42/webapps<span class="tag">&lt;/<span class="name">liferay.app.server.deploy.dir</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">liferay.app.server.lib.global.dir</span>&gt;</span>$&#123;liferay.home&#125;/tomcat-7.0.42/lib/ext<span class="tag">&lt;/<span class="name">liferay.app.server.lib.global.dir</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">liferay.app.server.portal.dir</span>&gt;</span>$&#123;liferay.home&#125;/tomcat-7.0.42/webapps/ROOT<span class="tag">&lt;/<span class="name">liferay.app.server.portal.dir</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">liferay.version</span>&gt;</span>6.2.1<span class="tag">&lt;/<span class="name">liferay.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">liferay.maven.plugin.version</span>&gt;</span>6.2.1<span class="tag">&lt;/<span class="name">liferay.maven.plugin.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>liferay-plugin-repo<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Liferay Repo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repository.liferay.com/nexus/content/groups/liferay-ce/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>never<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>liferay-repo<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Liferay Repo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repository.liferay.com/nexus/content/groups/liferay-ce/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>完成以上配置之后，再在项目文件夹上点击右键，选择Maven-&gt;Update Project…。这样eclipse就会下载下项目需要的依赖。再在项目中运行以下命令，即可打包、发布项目。也可以使用项目右键中Run As中的maven相关命令运行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn clean package liferay:deploy</span><br></pre></td></tr></table></figure>
<p>–<strong>EOF</strong>–</p>
]]></content>
      <categories>
        <category>liferay</category>
      </categories>
      <tags>
        <tag>liferay</tag>
        <tag>maven</tag>
        <tag>eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Liferay的一些文章链接</title>
    <url>/2014/04/10/some-links-about-liferay/</url>
    <content><![CDATA[<p>一些与liferay有关的链接。</p>
<ol>
<li><a href="http://www.liferay.com/" target="_blank" rel="noopener">liferay官网</a></li>
<li><a href="http://liferaytrends.blogspot.com/2013/07/new-features-in-liferay-portal-v62.html" target="_blank" rel="noopener">New Features in Liferay Portal v6.2</a></li>
<li><a href="http://www.huqiwen.com/category/technology-share/liferay/" target="_blank" rel="noopener">Liferay技术blog</a></li>
<li><a href="https://github.com/liferay" target="_blank" rel="noopener">Lifeary in github</a></li>
<li><a href="http://www.liferay.com/zh/community/wiki/-/wiki/Main/SearchContainer" target="_blank" rel="noopener">Lifeary SearchContainer</a></li>
<li><a href="http://www.liferay.com/zh/community/wiki/-/wiki/Main/Custom+Velocity+Variables" target="_blank" rel="noopener">Custom Velocity Variables</a></li>
<li><a href="http://www.liferay.com/zh/community/wiki/-/wiki/Main/Portlet+to+Portlet+Communication" target="_blank" rel="noopener">Portlet to Portlet Communication</a></li>
<li><a href="http://www.liferay.com/zh/community/wiki/-/wiki/Main/UI+Taglib#section-UI+Taglib-journal-article" target="_blank" rel="noopener">Liferay UI Taglib</a></li>
<li><a href="http://www.liferay.com/zh/community/wiki/-/wiki/Main/Customize+DB+Column+Sizes#section-Customize+DB+Column+Sizes-Introduction" target="_blank" rel="noopener">Customize DB Column Sizes</a></li>
<li><a href="http://struts.apache.org/release/2.3.x/docs/portlet-plugin.html" target="_blank" rel="noopener">Apache Struts 2 Documentation Portlet Plugin</a></li>
</ol>
<hr>
<p>全文完</p>
]]></content>
      <categories>
        <category>liferay</category>
      </categories>
      <tags>
        <tag>liferay</tag>
        <tag>links</tag>
      </tags>
  </entry>
  <entry>
    <title>ClassNameId和ClassPK的意义</title>
    <url>/2014/04/09/the-meaning-of-classnameid-and-classpk/</url>
    <content><![CDATA[<p>本文将介绍liferay中<code>classNameId</code>和<code>ClassPK</code>的意义。</p>
<p>Liferay中一些表中包含<code>classNameId</code>和<code>classPK</code>这两个字段，其中<code>classNameId</code>对应<code>ClassName_</code>表中的<code>classNameId</code>字段。<code>ClassName_</code>表中另一个字段是<code>value</code>，其值为一个model对象的全路径名，如<code>com.liferay.portal.model.Account</code>。每个model有一张表与之对应，如<code>Account_</code>。<code>classPK</code>的意思就是这张表的主键。</p>
<p>如上所述，通过<code>classNameId</code>和<code>classPK</code>这两个字段就能定位一条entity记录。</p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ol>
<li><a href="https://www.liferay.com/zh/community/forums/-/message_boards/message/679177" target="_blank" rel="noopener">What is classPK?</a></li>
</ol>
<hr>
<p>全文完</p>
]]></content>
      <categories>
        <category>liferay</category>
      </categories>
      <tags>
        <tag>liferay</tag>
        <tag>classnameid</tag>
        <tag>classpk</tag>
      </tags>
  </entry>
  <entry>
    <title>Liferay URL parameters details</title>
    <url>/2014/04/08/liferay-url-parameters-details/</url>
    <content><![CDATA[<p>本文将介绍lifeary url中的部分参数含义。转自<a href="http://www.liferaysolution.com/2011/09/liferay-url-parameters-details.html" target="_blank" rel="noopener">Liferay URL parameters details</a>。</p>
<ol>
<li><code>p_p_id</code>: this parameter is used to tell which portlet to access.</li>
<li><code>p_p_lifecycle</code>: this parameter is used in telling Liferay which action to perform. This is a binary value (0 or 1). 0 simply tells Liferay to just render the portlet, whereas 1 tells Liferay to call the process Method of a StrutsAction.</li>
<li><code>p_p_state</code>: this parameter is a unique parameter, in that, it is used in helping with Liferay pop ups and AJAX calls. In the current URL above, the parameter is set to normal, therefore, everything is rendered as it should. This parameter also has other values, such as exclusive, maximized and minimized.<br> <strong>exclusive</strong> state tells the page to ONLY render that particular portlet<br> <strong>maximized</strong> state is used in telling liferay to render the portlet (when placed on a page) in full, works kinda like if you were to have a collapsible div in javascript.The display below shows you what adding a new Web Content Display looks like. Surrounding this display item there is a border with a few buttons to click on to perform actions for this particular portlet. This is to demonstrate the Maximized and Minimized States for a portlet. Clicking on the Minus sign will collapse the div, whereas, clicking on the Plus sign will Maximize the div.<br> <strong>minimized</strong> state (shown above) is used to display the portlet collapsed.</li>
<li><code>p_p_mode</code>: this parameter acts as a Struts Action parameter. Just like a switch statement in PHP, this parameter is used to tell which Struts Method to render. This is mainly seen/used while in the control panel when you are editing a created page or editing your personal profile.</li>
<li><code>p_p_col_id</code> and <code>p_p_col_count</code>: these parameters are used in aiding the Liferay templating system.</li>
</ol>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ol>
<li><a href="http://www.liferaysolution.com/2011/09/liferay-url-parameters-details.html" target="_blank" rel="noopener">Liferay URL parameters details</a></li>
</ol>
<hr>
<p>全文完</p>
]]></content>
      <categories>
        <category>liferay</category>
      </categories>
      <tags>
        <tag>liferay</tag>
        <tag>url</tag>
        <tag>parameter</tag>
      </tags>
  </entry>
  <entry>
    <title>使用double构建一个BigDecimal</title>
    <url>/2014/04/07/use-double-build-bigdecimal/</url>
    <content><![CDATA[<p>使用<code>new BigDecimal(double val)</code>得到<code>BigDecimal</code>并不是想像结果一样。以下为测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigDecimalTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"new BigDecimal(\"1.1\") = "</span> + <span class="keyword">new</span> BigDecimal(<span class="string">"1.1"</span>));</span><br><span class="line">		System.out.println(<span class="string">"new BigDecimal(1.1) = "</span> + <span class="keyword">new</span> BigDecimal(<span class="number">1.1</span>));</span><br><span class="line">		System.out.println(<span class="string">"BigDecimal.valueOf(1.1) = "</span> + BigDecimal.valueOf(<span class="number">1.1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译执行，结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new BigDecimal(&quot;1.1&quot;) &#x3D; 1.1</span><br><span class="line">new BigDecimal(1.1) &#x3D; 1.100000000000000088817841970012523233890533447265625</span><br><span class="line">BigDecimal.valueOf(1.1) &#x3D; 1.1</span><br></pre></td></tr></table></figure>
<p>可以看到<code>new BigDecimal(1.1)</code>的结果不是想要得到的<code>1.1</code>。如果想得到一个精确的<code>BigDecimal</code>那么使用<code>new BigDecimal(String val)</code>，即使用一个字符串类型作为参数，如果必须使用<code>double</code>作参数，那么使用<code>BigDecimal valueOf(double val)</code>，如<code>BigDecimal.valueOf(1.1)</code>。</p>
<hr>
<p>全文完</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>bigdecimal</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装最新版本nodejs</title>
    <url>/2014/04/06/ubuntu-install-lastest-nodejs/</url>
    <content><![CDATA[<p>Ubuntu官方源里面的nodejs版本有点低，有些基于nodejs的应用需要使用高版本，以下命令可以安装最新的稳定版本nodejs。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y python-software-properties python g++ make</span><br><span class="line">sudo add-apt-repository -y ppa:chris-lea/node.js</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install nodejs</span><br></pre></td></tr></table></figure>

<hr>
<p>全文完</p>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Liferay crud portlet demo</title>
    <url>/2014/04/05/liferay-crud-portlet-demo/</url>
    <content><![CDATA[<p>本文将介绍如果创建一个拥有CRUD功能的portlet。项目代码已托管到github，地址为：<a href="https://github.com/zhaiyz/sample-portlet" target="_blank" rel="noopener">https://github.com/zhaiyz/sample-portlet</a> 可使用以下命令下载代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zhaiyz/sample-portlet.git sample</span><br></pre></td></tr></table></figure>

<h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ul>
<li>OS：ubuntu 12.04 64位</li>
<li>JDK：1.6.0_45</li>
<li>Maven：3.0.5</li>
<li>Liferay Portal：6.2.0-ce-ga1</li>
<li>Struts2：2.3.16.1</li>
</ul>
<h3 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h3><ol>
<li>创建一个<code>sample</code>portlet，参考<a href="http://zhaiyz.com/2014/04/01/liferay-service-builder/">Liferay Service Builder</a></li>
<li>集成struts，参考<a href="http://zhaiyz.com/2014/03/31/develop-lifeay-portlet-with-struts2/">Liferay集成Struts2</a></li>
<li>创建数据库表结构，参考<a href="http://zhaiyz.com/2014/04/01/liferay-service-builder/">Liferay Service Builder</a></li>
<li>创建自定义方法，参考<a href="http://zhaiyz.com/2014/04/02/add-methods-to-service-impl/">Liferay添加自定义服务层方法</a></li>
<li>创建应用层类，包含<code>BookListAction</code>、<code>BookAddAction</code>、<code>BookDeleteAction</code>、<code>BookEditAction</code></li>
<li>创建显示层页面，包含<code>view.jsp</code>、<code>edit.jsp</code></li>
<li>创建<code>struts.xml</code>，并配置<code>action</code>与<code>jsp</code>的关联</li>
</ol>
<hr>
<p>未完待续</p>
]]></content>
      <categories>
        <category>liferay</category>
      </categories>
      <tags>
        <tag>liferay</tag>
        <tag>portlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Sublime Text 3 License</title>
    <url>/2014/04/04/sublime-text-3-license/</url>
    <content><![CDATA[<ul>
<li>系统：ubuntu 12.04 64位</li>
<li>Sublime Text 3：<a href="http://c758482.r82.cf2.rackcdn.com/sublime-text_build-3059_amd64.deb" target="_blank" rel="noopener">sublime-text_build-3059_amd64.deb</a></li>
<li>License：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">----- BEGIN LICENSE -----</span><br><span class="line">Andrew Weber</span><br><span class="line">Single User License</span><br><span class="line">EA7E-855605</span><br><span class="line">813A03DD 5E4AD9E6 6C0EEB94 BC99798F</span><br><span class="line">942194A6 02396E98 E62C9979 4BB979FE</span><br><span class="line">91424C9D A45400BF F6747D88 2FB88078</span><br><span class="line">90F5CC94 1CDC92DC 8457107A F151657B</span><br><span class="line">1D22E383 A997F016 42397640 33F41CFC</span><br><span class="line">E1D0AE85 A0BBD039 0E9C8D55 E1B89D5D</span><br><span class="line">5CDB7036 E56DE1C0 EFCC0840 650CD3A6</span><br><span class="line">B98FC99C 8FAC73EE D2B95564 DF450523</span><br><span class="line">------ END LICENSE ------</span><br></pre></td></tr></table></figure>
<p>亲测可用，此License可能还能应用于其他版本的<a href="http://www.sublimetext.com/" target="_blank" rel="noopener">Sublime Text</a>。</p>
<hr>
<p>全文完</p>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title>Liferay定制数据库字段长度</title>
    <url>/2014/04/03/liferay-customize-db-column-sizes/</url>
    <content><![CDATA[<p>本文将介绍改变数据库字段默认长度。</p>
<h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ul>
<li>OS：ubuntu 12.04 64位</li>
<li>Liferay Portal：6.2.0-ce-ga1</li>
<li>Mysql：5.5.35</li>
</ul>
<h3 id="创建portlet"><a href="#创建portlet" class="headerlink" title="创建portlet"></a>创建portlet</h3><p>按照<a href="http://zhaiyz.com/2014/04/01/liferay-service-builder/">Liferay Service Builder</a>中的步骤创建拥有一个<code>Book</code>实体的portlet。</p>
<h3 id="自定义字段长度"><a href="#自定义字段长度" class="headerlink" title="自定义字段长度"></a>自定义字段长度</h3><p>在<code>service.xml</code>文件如果有字段的类型为<code>String</code>，如</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">type</span>=<span class="string">"String"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>那么生成数据库表时，<code>title</code>字段的长度默认为<code>75</code>。如果要改变默认长度，需要修改<code>sample/sample-portlet/src/main/resources/META-INF</code>目录下的<code>portlet-model-hints.xml</code>文件内容。现修改为如下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">model-hints</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">model</span> <span class="attr">name</span>=<span class="string">"com.zhaiyz.model.Book"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"bookId"</span> <span class="attr">type</span>=<span class="string">"long"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"companyId"</span> <span class="attr">type</span>=<span class="string">"long"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"groupId"</span> <span class="attr">type</span>=<span class="string">"long"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"userId"</span> <span class="attr">type</span>=<span class="string">"long"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">type</span>=<span class="string">"String"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">hint</span> <span class="attr">name</span>=<span class="string">"max-length"</span>&gt;</span>255<span class="tag">&lt;/<span class="name">hint</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"createDate"</span> <span class="attr">type</span>=<span class="string">"Date"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"modifiedDate"</span> <span class="attr">type</span>=<span class="string">"Date"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">model</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">model-hints</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>修改完成之后，需要再次执行以下命令，重新生成代码及数据库脚本打包并部署。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn liferay:build-service package liferay:deploy</span><br></pre></td></tr></table></figure>
<p>成功执行完以上命令后，再启动tomcat，启动成功后，再查看数据库的<code>LP_Book</code>表，结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc LP_Book;</span><br><span class="line">+--------------+--------------+------+-----+---------+-------+</span><br><span class="line">| Field        | Type         | Null | Key | Default | Extra |</span><br><span class="line">+--------------+--------------+------+-----+---------+-------+</span><br><span class="line">| bookId       | bigint(20)   | NO   | PRI | NULL    |       |</span><br><span class="line">| companyId    | bigint(20)   | YES  |     | NULL    |       |</span><br><span class="line">| groupId      | bigint(20)   | YES  |     | NULL    |       |</span><br><span class="line">| userId       | bigint(20)   | YES  |     | NULL    |       |</span><br><span class="line">| title        | varchar(255) | YES  |     | NULL    |       |</span><br><span class="line">| createDate   | datetime     | YES  |     | NULL    |       |</span><br><span class="line">| modifiedDate | datetime     | YES  |     | NULL    |       |</span><br><span class="line">+--------------+--------------+------+-----+---------+-------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>可以看到<code>title</code>字段的长度已经变为<code>255</code>。还有别一种配置方法可以完成同样的功能，配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;model-hints&gt;</span><br><span class="line">	&lt;hint-collection name&#x3D;&quot;VARCHAR-255&quot;&gt;</span><br><span class="line">        &lt;hint name&#x3D;&quot;max-length&quot;&gt;255&lt;&#x2F;hint&gt;</span><br><span class="line">    &lt;&#x2F;hint-collection&gt;</span><br><span class="line"></span><br><span class="line">	&lt;model name&#x3D;&quot;com.zhaiyz.model.Book&quot;&gt;</span><br><span class="line">		&lt;field name&#x3D;&quot;bookId&quot; type&#x3D;&quot;long&quot; &#x2F;&gt;</span><br><span class="line">		&lt;field name&#x3D;&quot;companyId&quot; type&#x3D;&quot;long&quot; &#x2F;&gt;</span><br><span class="line">		&lt;field name&#x3D;&quot;groupId&quot; type&#x3D;&quot;long&quot; &#x2F;&gt;</span><br><span class="line">		&lt;field name&#x3D;&quot;userId&quot; type&#x3D;&quot;long&quot; &#x2F;&gt;</span><br><span class="line">		&lt;field name&#x3D;&quot;title&quot; type&#x3D;&quot;String&quot;&gt;</span><br><span class="line">			&lt;hint-collection name&#x3D;&quot;VARCHAR-255&quot; &#x2F;&gt;</span><br><span class="line">		&lt;&#x2F;field&gt;</span><br><span class="line">		&lt;field name&#x3D;&quot;createDate&quot; type&#x3D;&quot;Date&quot; &#x2F;&gt;</span><br><span class="line">		&lt;field name&#x3D;&quot;modifiedDate&quot; type&#x3D;&quot;Date&quot; &#x2F;&gt;</span><br><span class="line">	&lt;&#x2F;model&gt;</span><br><span class="line">&lt;&#x2F;model-hints&gt;</span><br></pre></td></tr></table></figure>
<p>实际开发中，推荐使用这种方法。</p>
<h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p>在<code>portlet-model-hints.xml</code>文件中还能对字段进行更多的配置，如<code>default-value</code>、<code>display-height</code>、<code>display-width</code>等属性。更多内容，请阅读<a href="http://www.liferay.com/zh/community/wiki/-/wiki/Main/Customize+DB+Column+Sizes" target="_blank" rel="noopener">Customize DB Column Sizes </a>。</p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="http://www.liferay.com/zh/community/wiki/-/wiki/Main/Customize+DB+Column+Sizes" target="_blank" rel="noopener">Customize DB Column Sizes </a>。</p>
<hr>
<p>全文完</p>
]]></content>
      <categories>
        <category>liferay</category>
      </categories>
      <tags>
        <tag>liferay</tag>
        <tag>database</tag>
        <tag>column</tag>
        <tag>size</tag>
      </tags>
  </entry>
  <entry>
    <title>Liferay添加自定义服务层方法</title>
    <url>/2014/04/02/add-methods-to-service-impl/</url>
    <content><![CDATA[<p>本文将介绍在service层添加自定义方法。</p>
<h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ul>
<li>OS：ubuntu 12.04 64位</li>
<li>Liferay Portal：6.2.0-ce-ga1</li>
</ul>
<h3 id="创建portlet"><a href="#创建portlet" class="headerlink" title="创建portlet"></a>创建portlet</h3><p>按照<a href="http://zhaiyz.com/2014/04/01/liferay-service-builder/">Liferay Service Builder</a>一文中的步骤创建拥有一个<code>Book</code>实体的<code>servicebuilder-portlet</code>。</p>
<h3 id="添加服务层方法"><a href="#添加服务层方法" class="headerlink" title="添加服务层方法"></a>添加服务层方法</h3><p>在<code>BookLocalServiceImpl.java</code>中添加一个<code>addBook</code>方法，以下为方法代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhaiyz.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhaiyz.model.Book;</span><br><span class="line"><span class="keyword">import</span> com.zhaiyz.service.base.BookLocalServiceBaseImpl;</span><br><span class="line"><span class="keyword">import</span> com.liferay.counter.service.CounterLocalServiceUtil;</span><br><span class="line"><span class="keyword">import</span> com.liferay.portal.kernel.exception.PortalException;</span><br><span class="line"><span class="keyword">import</span> com.liferay.portal.kernel.exception.SystemException;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookLocalServiceImpl</span> <span class="keyword">extends</span> <span class="title">BookLocalServiceBaseImpl</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">addBook</span><span class="params">(<span class="keyword">long</span> companyId, <span class="keyword">long</span> groupId, <span class="keyword">long</span> userId, String title)</span> <span class="keyword">throws</span> PortalException, SystemException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> bookId = CounterLocalServiceUtil.increment(Book<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">        Date now = <span class="keyword">new</span> Date();</span><br><span class="line">        Book book = bookPersistence.create(bookId);</span><br><span class="line"></span><br><span class="line">        book.setCompanyId(companyId);</span><br><span class="line">        book.setGroupId(groupId);</span><br><span class="line">        book.setUserId(userId);</span><br><span class="line">        book.setTitle(title);</span><br><span class="line">        book.setCreateDate(now);</span><br><span class="line">        book.setModifiedDate(now);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bookPersistence.add(book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>在<code>BookServiceImpl</code>中添加完方法还不能直接使用。需要运行以下命令生成相关的代码再使用<code>BookLocalServiceUtil</code>类使用添加的方法。为了防止出现<code>Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: PermGen space</code>异常，需要设置<code>MAVEN_OPTS</code>参数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MAVEN_OPTS=<span class="string">"-Xmx512m -XX:MaxPermSize=256m"</span></span><br><span class="line">mvn liferay:build-service</span><br></pre></td></tr></table></figure>
<p><code>liferay:build-service</code>只是生成代码，并不会编译，如果要验证生成的代码是否能编译通过，需要执行<code>mvn package</code>命令。所有命令执行成功之后，就可以在业务层使用新添加的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BookLocalServiceUtil.addBook(companyId, groupId, userId, title);</span><br></pre></td></tr></table></figure>

<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul>
<li><a href="http://www.liferay.com/zh/documentation/liferay-portal/6.0/development/-/ai/service-build-2" target="_blank" rel="noopener">Liferay Portal 6.0 - Development Guide - Service Builder</a></li>
</ul>
<hr>
<p>全文完</p>
]]></content>
      <categories>
        <category>liferay</category>
      </categories>
      <tags>
        <tag>liferay</tag>
        <tag>method</tag>
        <tag>service</tag>
      </tags>
  </entry>
  <entry>
    <title>Liferay Service Builder</title>
    <url>/2014/04/01/liferay-service-builder/</url>
    <content><![CDATA[<p>本文将介绍<code>service.xml</code>文件的配置，定义一个实体并执行<code>mvn liferay:build-service</code>创建出数据库脚本及相关的<code>model</code>、<code>service</code>等文件。</p>
<h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ul>
<li>OS：ubuntu 12.04 64位</li>
<li>Liferay Portal：6.2.0-ce-ga1</li>
<li>Mysql：5.5.35</li>
</ul>
<h3 id="创建portlet"><a href="#创建portlet" class="headerlink" title="创建portlet"></a>创建portlet</h3><p>使用以下命令创建名为<code>sample</code>的项目。其中<code>archetypeArtifactId</code>为<code>liferay-servicebuilder-archetype</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn archetype:generate \</span><br><span class="line">    -DarchetypeArtifactId=liferay-servicebuilder-archetype \</span><br><span class="line">    -DarchetypeCatalog=https://repository.liferay.com/nexus/content/groups/liferay-ce/archetype-catalog.xml \</span><br><span class="line">    -DarchetypeGroupId=com.liferay.maven.archetypes \</span><br><span class="line">    -DarchetypeRepository=https://repository.liferay.com/nexus/content/groups/liferay-ce \</span><br><span class="line">    -DarchetypeVersion=6.2.0-ga1 \</span><br><span class="line">    -DgroupId=com.zhaiyz \</span><br><span class="line">    -DartifactId=sample \</span><br><span class="line">    -DinteractiveMode=<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>运行完成之后，项目目录如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sample/</span><br><span class="line">├── pom.xml</span><br><span class="line">├── sample-portlet</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">│       └── main</span><br><span class="line">│           ├── java</span><br><span class="line">│           ├── resources</span><br><span class="line">│           │   └── portlet.properties</span><br><span class="line">│           └── webapp</span><br><span class="line">│               ├── css</span><br><span class="line">│               │   └── main.css</span><br><span class="line">│               ├── icon.png</span><br><span class="line">│               ├── js</span><br><span class="line">│               │   └── main.js</span><br><span class="line">│               ├── view.jsp</span><br><span class="line">│               └── WEB-INF</span><br><span class="line">│                   ├── liferay-display.xml</span><br><span class="line">│                   ├── liferay-plugin-package.properties</span><br><span class="line">│                   ├── liferay-portlet.xml</span><br><span class="line">│                   ├── portlet.xml</span><br><span class="line">│                   ├── service.xml</span><br><span class="line">│                   └── web.xml</span><br><span class="line">└── sample-portlet-service</span><br><span class="line">    └── pom.xml</span><br></pre></td></tr></table></figure>

<p>其中<code>sample</code>为父项目，<code>sample-portlet</code>和<code>sample-portlet-service</code>为子项目。修改<code>sample/pom.xml</code>文件，添加以下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!-- 指向自己的LP_HOME --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">liferay.home</span>&gt;</span>/home/zhaiyz/develop/liferay-portal-6.2.0-ce-ga1<span class="tag">&lt;/<span class="name">liferay.home</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">liferay.auto.deploy.dir</span>&gt;</span>$&#123;liferay.home&#125;/deploy<span class="tag">&lt;/<span class="name">liferay.auto.deploy.dir</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">liferay.app.server.deploy.dir</span>&gt;</span>$&#123;liferay.home&#125;/tomcat-7.0.42/webapps<span class="tag">&lt;/<span class="name">liferay.app.server.deploy.dir</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">liferay.app.server.lib.global.dir</span>&gt;</span>$&#123;liferay.home&#125;/tomcat-7.0.42/lib/ext<span class="tag">&lt;/<span class="name">liferay.app.server.lib.global.dir</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">liferay.app.server.portal.dir</span>&gt;</span>$&#123;liferay.home&#125;/tomcat-7.0.42/webapps/ROOT<span class="tag">&lt;/<span class="name">liferay.app.server.portal.dir</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">liferay.version</span>&gt;</span>6.2.0-ga1<span class="tag">&lt;/<span class="name">liferay.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">liferay.maven.plugin.version</span>&gt;</span>6.2.0-ga1<span class="tag">&lt;/<span class="name">liferay.maven.plugin.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>liferay-plugin-repo<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Liferay Repo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repository.liferay.com/nexus/content/groups/liferay-ce/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>never<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>liferay-repo<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Liferay Repo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repository.liferay.com/nexus/content/groups/liferay-ce/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>两个子项目中不需要添加此配置，可以直接继承父项目的属性。</p>
<h3 id="配置service-xml文件，并生成相关代码"><a href="#配置service-xml文件，并生成相关代码" class="headerlink" title="配置service.xml文件，并生成相关代码"></a>配置service.xml文件，并生成相关代码</h3><p>修改<code>service.xml</code>文件中的内容为以下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">service-builder</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//Liferay//DTD Service Builder 6.2.0//EN"</span> <span class="meta-string">"http://www.liferay.com/dtd/liferay-service-builder_6_2_0.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">service-builder</span> <span class="attr">package-path</span>=<span class="string">"com.zhaiyz"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">author</span>&gt;</span>zhaiyz<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">namespace</span>&gt;</span>LP<span class="tag">&lt;/<span class="name">namespace</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">entity</span> <span class="attr">name</span>=<span class="string">"Book"</span> <span class="attr">local-service</span>=<span class="string">"true"</span> <span class="attr">remote-service</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- PK fields --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"bookId"</span> <span class="attr">type</span>=<span class="string">"long"</span> <span class="attr">primary</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"companyId"</span> <span class="attr">type</span>=<span class="string">"long"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"groupId"</span> <span class="attr">type</span>=<span class="string">"long"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"userId"</span> <span class="attr">type</span>=<span class="string">"long"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">type</span>=<span class="string">"String"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"createDate"</span> <span class="attr">type</span>=<span class="string">"Date"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"modifiedDate"</span> <span class="attr">type</span>=<span class="string">"Date"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service-builder</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>执行以下命令生成相关代码，需要为maven分配更大的运行内存，不然可能会执行失败。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MAVEN_OPTS=<span class="string">"-Xmx512m -XX:MaxPermSize=128m"</span></span><br><span class="line">mvn liferay:build-service</span><br></pre></td></tr></table></figure>
<p>此命令会生成<code>Book</code>相关的<code>model</code>、<code>service</code>以及数据库表创建脚本等内容。执行成功之后的目录结构如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── pom.xml</span><br><span class="line">├── sample-portlet</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">│       └── main</span><br><span class="line">│           ├── java</span><br><span class="line">│           │   └── com</span><br><span class="line">│           │       └── zhaiyz</span><br><span class="line">│           │           ├── model</span><br><span class="line">│           │           │   └── impl</span><br><span class="line">│           │           │       ├── BookBaseImpl.java</span><br><span class="line">│           │           │       ├── BookCacheModel.java</span><br><span class="line">│           │           │       ├── BookImpl.java</span><br><span class="line">│           │           │       └── BookModelImpl.java</span><br><span class="line">│           │           └── service</span><br><span class="line">│           │               ├── base</span><br><span class="line">│           │               │   ├── BookLocalServiceBaseImpl.java</span><br><span class="line">│           │               │   └── BookLocalServiceClpInvoker.java</span><br><span class="line">│           │               ├── impl</span><br><span class="line">│           │               │   └── BookLocalServiceImpl.java</span><br><span class="line">│           │               └── persistence</span><br><span class="line">│           │                   └── BookPersistenceImpl.java</span><br><span class="line">│           ├── resources</span><br><span class="line">│           │   ├── META-INF</span><br><span class="line">│           │   │   ├── base-spring.xml</span><br><span class="line">│           │   │   ├── cluster-spring.xml</span><br><span class="line">│           │   │   ├── hibernate-spring.xml</span><br><span class="line">│           │   │   ├── infrastructure-spring.xml</span><br><span class="line">│           │   │   ├── portlet-hbm.xml</span><br><span class="line">│           │   │   ├── portlet-model-hints.xml</span><br><span class="line">│           │   │   ├── portlet-orm.xml</span><br><span class="line">│           │   │   ├── portlet-spring.xml</span><br><span class="line">│           │   │   └── shard-data-source-spring.xml</span><br><span class="line">│           │   ├── portlet.properties</span><br><span class="line">│           │   └── service.properties</span><br><span class="line">│           └── webapp</span><br><span class="line">│               ├── css</span><br><span class="line">│               │   └── main.css</span><br><span class="line">│               ├── icon.png</span><br><span class="line">│               ├── js</span><br><span class="line">│               │   └── main.js</span><br><span class="line">│               ├── view.jsp</span><br><span class="line">│               └── WEB-INF</span><br><span class="line">│                   ├── liferay-display.xml</span><br><span class="line">│                   ├── liferay-plugin-package.properties</span><br><span class="line">│                   ├── liferay-portlet.xml</span><br><span class="line">│                   ├── portlet.xml</span><br><span class="line">│                   ├── service.xml</span><br><span class="line">│                   ├── sql</span><br><span class="line">│                   │   ├── indexes.properties</span><br><span class="line">│                   │   ├── indexes.sql</span><br><span class="line">│                   │   ├── sequences.sql</span><br><span class="line">│                   │   └── tables.sql</span><br><span class="line">│                   └── web.xml</span><br><span class="line">└── sample-portlet-service</span><br><span class="line">    ├── pom.xml</span><br><span class="line">    └── src</span><br><span class="line">        └── main</span><br><span class="line">            └── java</span><br><span class="line">                └── com</span><br><span class="line">                    └── zhaiyz</span><br><span class="line">                        ├── model</span><br><span class="line">                        │   ├── BookClp.java</span><br><span class="line">                        │   ├── Book.java</span><br><span class="line">                        │   ├── BookModel.java</span><br><span class="line">                        │   ├── BookSoap.java</span><br><span class="line">                        │   └── BookWrapper.java</span><br><span class="line">                        ├── NoSuchBookException.java</span><br><span class="line">                        └── service</span><br><span class="line">                            ├── BookLocalServiceClp.java</span><br><span class="line">                            ├── BookLocalService.java</span><br><span class="line">                            ├── BookLocalServiceUtil.java</span><br><span class="line">                            ├── BookLocalServiceWrapper.java</span><br><span class="line">                            ├── ClpSerializer.java</span><br><span class="line">                            ├── messaging</span><br><span class="line">                            │   └── ClpMessageListener.java</span><br><span class="line">                            └── persistence</span><br><span class="line">                                ├── BookActionableDynamicQuery.java</span><br><span class="line">                                ├── BookPersistence.java</span><br><span class="line">                                └── BookUtil.java</span><br></pre></td></tr></table></figure>

<h3 id="打包发布并运行"><a href="#打包发布并运行" class="headerlink" title="打包发布并运行"></a>打包发布并运行</h3><p>执行以下命令，打包并发布至<code>LP_HOME</code>下的<code>deploy</code>目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn package liferay:deploy</span><br></pre></td></tr></table></figure>
<p>启动tomcat，在<code>deploy</code>下的war包会自动发布到webapps下。启动完成之后，数据库中就会存在一个名为<code>LP_Book</code>的表，其中<code>LP</code>为<code>service.xml</code>中定义的<code>namespace</code>，<code>Book</code>为<code>entry</code>的<code>name</code>属性值。查看此表定义如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc LP_Book;</span><br><span class="line">+--------------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field        | Type        | Null | Key | Default | Extra |</span><br><span class="line">+--------------+-------------+------+-----+---------+-------+</span><br><span class="line">| bookId       | bigint(20)  | NO   | PRI | NULL    |       |</span><br><span class="line">| companyId    | bigint(20)  | YES  |     | NULL    |       |</span><br><span class="line">| groupId      | bigint(20)  | YES  |     | NULL    |       |</span><br><span class="line">| userId       | bigint(20)  | YES  |     | NULL    |       |</span><br><span class="line">| title        | varchar(75) | YES  |     | NULL    |       |</span><br><span class="line">| createDate   | datetime    | YES  |     | NULL    |       |</span><br><span class="line">| modifiedDate | datetime    | YES  |     | NULL    |       |</span><br><span class="line">+--------------+-------------+------+-----+---------+-------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<hr>
<p>全文完</p>
]]></content>
      <categories>
        <category>liferay</category>
      </categories>
      <tags>
        <tag>liferay</tag>
        <tag>service</tag>
      </tags>
  </entry>
  <entry>
    <title>Liferay集成Struts2</title>
    <url>/2014/03/31/develop-lifeay-portlet-with-struts2/</url>
    <content><![CDATA[<p>本文将介绍使用struts2开发Liferay Portal。</p>
<h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ul>
<li>OS：ubuntu 12.04 64位</li>
<li>Liferay Portal：6.2.0-ce-ga1</li>
<li>Struts2：2.3.16.1</li>
</ul>
<h3 id="创建portlet"><a href="#创建portlet" class="headerlink" title="创建portlet"></a>创建portlet</h3><p>使用<a href="http://zhaiyz.com/2014/03/29/develop-liferay-plugins-with-maven/">Liferay Portal Maven开发环境搭建</a>文章中的步骤，创建一个<code>sample-portlet</code>项目。</p>
<h3 id="集成struts2"><a href="#集成struts2" class="headerlink" title="集成struts2"></a>集成struts2</h3><p>在<code>pom.xml</code>中添加struts2-portlet-plugin依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.struts<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>struts2-portlet-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.16.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>在<code>sample-portlet/src/main/resources</code>目录下创建<code>struts.xml</code>文件，并添加以下内容。此项目不需要自己编写action类，使用struts自带的即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">struts</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">	<span class="meta-string">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span></span><br><span class="line"><span class="meta">	<span class="meta-string">"http://struts.apache.org/dtds/struts-2.3.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"sample-portlet"</span> <span class="attr">namespace</span>=<span class="string">"/sample-portlet"</span> <span class="attr">extends</span>=<span class="string">"struts-portlet-default"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"view"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.ActionSupport"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/WEB-INF/jsp/view.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在<code>WEB-INF</code>目录下创建<code>jsp</code>文件夹，并把在<code>webapp</code>目录下的<code>view.jsp</code>移动到<code>jsp</code>目录。现在项目的目录结构如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── pom.xml</span><br><span class="line">├── src</span><br><span class="line">│   └── main</span><br><span class="line">│       ├── java</span><br><span class="line">│       ├── resources</span><br><span class="line">│       │   └── struts.xml</span><br><span class="line">│       └── webapp</span><br><span class="line">│           ├── css</span><br><span class="line">│           │   └── main.css</span><br><span class="line">│           ├── icon.png</span><br><span class="line">│           ├── js</span><br><span class="line">│           │   └── main.js</span><br><span class="line">│           └── WEB-INF</span><br><span class="line">│               ├── jsp</span><br><span class="line">│               │   └── view.jsp</span><br><span class="line">│               ├── liferay-display.xml</span><br><span class="line">│               ├── liferay-plugin-package.properties</span><br><span class="line">│               ├── liferay-portlet.xml</span><br><span class="line">│               ├── portlet.xml</span><br><span class="line">│               └── web.xml</span><br></pre></td></tr></table></figure>

<p>修改<code>portlet.xml</code>中的内容以集成struts2，主要是使用<code>org.apache.struts2.portlet.dispatcher.Jsr286Dispatcher</code>替换<code>com.liferay.util.bridges.mvc.MVCPortlet</code>，再添加portlet需要运行action所在的namespace和默认执行的action名称等配置参数。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">portlet-app</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">portlet</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">portlet-name</span>&gt;</span>sample-portlet<span class="tag">&lt;/<span class="name">portlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">display-name</span>&gt;</span>sample-portlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">portlet-class</span>&gt;</span>org.apache.struts2.portlet.dispatcher.Jsr286Dispatcher<span class="tag">&lt;/<span class="name">portlet-class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 对应struts.xml中package的namespace --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">name</span>&gt;</span>portletNamespace<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>/sample-portlet<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 对应struts.xml中action的name --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">name</span>&gt;</span>defaultViewAction<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>view<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">expiration-cache</span>&gt;</span>0<span class="tag">&lt;/<span class="name">expiration-cache</span>&gt;</span></span><br><span class="line">		.</span><br><span class="line">        .</span><br><span class="line">        .</span><br><span class="line">	<span class="tag">&lt;/<span class="name">portlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">portlet-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="编译打包并发布"><a href="#编译打包并发布" class="headerlink" title="编译打包并发布"></a>编译打包并发布</h3><p>在<code>sample-portlet</code>目录下执行以下命令，如果之前没有下载过相关依赖，那么第一次运行时会下载所有依赖。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn clean package liferay:deploy</span><br></pre></td></tr></table></figure>
<p>启动liferay portal的tomcat。启动完毕后，以管理员身份登录，添加应用程序，在示例分类下可以找到<code>sample-portlet</code>，添加至页面，即可显示。</p>
<hr>
<p>全文完</p>
]]></content>
      <categories>
        <category>liferay</category>
      </categories>
      <tags>
        <tag>liferay</tag>
        <tag>struts</tag>
        <tag>portlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Liferay Portal连接mysql数据库配置</title>
    <url>/2014/03/30/liferay-portal-connect-mysql-database-confiuration/</url>
    <content><![CDATA[<p>本文将介绍Liferay Portal连接mysql数据库的相关配置。</p>
<h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ul>
<li>OS：ubuntu 12.04 64位</li>
<li>Liferay Portal：6.2.0-ce-ga1</li>
<li>Mysql：5.5.35</li>
</ul>
<h3 id="创建Mysql用户及数据库"><a href="#创建Mysql用户及数据库" class="headerlink" title="创建Mysql用户及数据库"></a>创建Mysql用户及数据库</h3><p>以root权限登录mysql，执行以下命令创建用户<code>lp62</code>、数据库<code>lportal</code>，并分配<code>lportal</code>的所有权限给<code>lp62</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user &#39;lp62&#39;@&#39;localhost&#39; identified by &#39;lp62&#39;;</span><br><span class="line">create database lportal character set utf8;</span><br><span class="line">grant all privileges on lportal.* to &#39;lp62&#39;@&#39;localhost&#39;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="创建portal-ext-properties文件并添加配置"><a href="#创建portal-ext-properties文件并添加配置" class="headerlink" title="创建portal-ext.properties文件并添加配置"></a>创建portal-ext.properties文件并添加配置</h3><p>在<code>LP_HOME</code>下创建<code>portal-ext.properties</code>文件。此时<code>LP_HOME</code>下的目录结构如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── data</span><br><span class="line">├── license</span><br><span class="line">├── portal-ext.properties</span><br><span class="line">├── readme.html</span><br><span class="line">└── tomcat-7.0.42</span><br></pre></td></tr></table></figure>
<p>添加以下配置到<code>portal-ext.properties</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jdbc.default.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.default.url=jdbc:mysql://localhost/lportal?useUnicode=<span class="literal">true</span>&amp;characterEncoding=UTF-8&amp;useFastDateParsing=<span class="literal">false</span></span><br><span class="line">jdbc.default.username=lp62</span><br><span class="line">jdbc.default.password=lp62</span><br></pre></td></tr></table></figure>

<h3 id="启动Liferay-Portal"><a href="#启动Liferay-Portal" class="headerlink" title="启动Liferay Portal"></a>启动Liferay Portal</h3><p>切换目录到<code>LP_HOME/tomcat-7.0.42/bin</code>目录下，执行<code>./startup.sh</code>。查看<code>LP_HOME/tomcat-7.0.42/log/catalina.out</code>，日志中包含以下一条，说明Liferay Portal正在初始化数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">14:30:24,670 INFO  [localhost-startStop-1][ReleaseLocalServiceImpl:84] Create tables and populate with default data</span><br></pre></td></tr></table></figure>
<p>由于需要创建表和初始数据，所以第一次执行需要较长时间，之后启动时则不需要。几分钟后，日志中出现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">信息: Server startup in 486616 ms</span><br></pre></td></tr></table></figure>
<p>说明启动成功。默认浏览器会打开<code>http://localhost:8080/</code>页面。之后再选择默认语言，创建模拟数据，输入密码提示等操作。就可以使用以Mysql为数据库的Liferay Portal了。</p>
<hr>
<p>全文完</p>
]]></content>
      <categories>
        <category>liferay</category>
      </categories>
      <tags>
        <tag>liferay</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Liferay Portal Maven开发环境搭建</title>
    <url>/2014/03/29/develop-liferay-plugins-with-maven/</url>
    <content><![CDATA[<p>本文将介绍从lifeay portal下载，创建maven项目到发布portlet的全过程。</p>
<h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ul>
<li>OS：ubuntu 12.04 64位</li>
<li>JDK：1.6.0_45</li>
<li>Maven：3.0.5</li>
<li>Liferay Portal：6.2.0-ce-ga1</li>
</ul>
<h3 id="下载Lifeay-Portal"><a href="#下载Lifeay-Portal" class="headerlink" title="下载Lifeay Portal"></a>下载Lifeay Portal</h3><ul>
<li>百度网盘下载链接：<a href="http://pan.baidu.com/s/1ntoHVfF" target="_blank" rel="noopener">http://pan.baidu.com/s/1ntoHVfF</a></li>
<li>官方下载链接：<a href="http://jaist.dl.sourceforge.net/project/lportal/Liferay%20Portal/6.2.0%20GA1/liferay-portal-tomcat-6.2.0-ce-ga1-20131101192857659.zip" target="_blank" rel="noopener">http://jaist.dl.sourceforge.net/project/lportal/Liferay%20Portal/6.2.0%20GA1/liferay-portal-tomcat-6.2.0-ce-ga1-20131101192857659.zip</a></li>
</ul>
<h3 id="解压Liferay-Portal"><a href="#解压Liferay-Portal" class="headerlink" title="解压Liferay Portal"></a>解压Liferay Portal</h3><p>把上一步下载的文件解压，得到<code>liferay-portal-6.2.0-ce-ga1</code>文件夹。把此文件夹copy至自己喜欢的一个目录，定义<code>tomcat-7.0.42</code>所在目录为<code>LP_HOME</code>，此时<code>LP_HOME</code>的目录结构如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── data</span><br><span class="line">├── license</span><br><span class="line">├── readme.html</span><br><span class="line">└── tomcat-7.0.42</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h3><p>由于6.2.0-ce-ga1版本的liferay portal还没有在maven中央库，需要使用liferay官方的库，地址为：<a href="https://repository.liferay.com/nexus/content/groups/liferay-ce" target="_blank" rel="noopener">https://repository.liferay.com/nexus/content/groups/liferay-ce</a><br>现在使用如下命令创建一个名为<code>sample-portlet</code>的项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn archetype:generate \</span><br><span class="line">    -DarchetypeArtifactId=liferay-portlet-archetype \</span><br><span class="line">    -DarchetypeCatalog=https://repository.liferay.com/nexus/content/groups/liferay-ce/archetype-catalog.xml \</span><br><span class="line">    -DarchetypeGroupId=com.liferay.maven.archetypes \</span><br><span class="line">    -DarchetypeRepository=https://repository.liferay.com/nexus/content/groups/liferay-ce \</span><br><span class="line">    -DarchetypeVersion=6.2.0-ga1 \</span><br><span class="line">    -DgroupId=com.zhaiyz \</span><br><span class="line">    -DartifactId=sample-portlet \</span><br><span class="line">    -DinteractiveMode=<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>创建的项目目录如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sample-portlet/</span><br><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br><span class="line">    └── main</span><br><span class="line">        ├── java</span><br><span class="line">        ├── resources</span><br><span class="line">        └── webapp</span><br><span class="line">            ├── css</span><br><span class="line">            │   └── main.css</span><br><span class="line">            ├── icon.png</span><br><span class="line">            ├── js</span><br><span class="line">            │   └── main.js</span><br><span class="line">            ├── view.jsp</span><br><span class="line">            └── WEB-INF</span><br><span class="line">                ├── liferay-display.xml</span><br><span class="line">                ├── liferay-plugin-package.properties</span><br><span class="line">                ├── liferay-portlet.xml</span><br><span class="line">                ├── portlet.xml</span><br><span class="line">                └── web.xml</span><br></pre></td></tr></table></figure>
<p>因为此时的pom.xml中的变量都还未赋值，而且需要把依赖库和插件库指向liferay官方库，所以要在pom.xml文件中添加如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">	.</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!-- 指向自己的LP_HOME --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">liferay.home</span>&gt;</span>/home/zhaiyz/develop/liferay-portal-6.2.0-ce-ga1<span class="tag">&lt;/<span class="name">liferay.home</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">liferay.auto.deploy.dir</span>&gt;</span>$&#123;liferay.home&#125;/deploy<span class="tag">&lt;/<span class="name">liferay.auto.deploy.dir</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">liferay.app.server.deploy.dir</span>&gt;</span>$&#123;liferay.home&#125;/tomcat-7.0.42/webapps<span class="tag">&lt;/<span class="name">liferay.app.server.deploy.dir</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">liferay.app.server.lib.global.dir</span>&gt;</span>$&#123;liferay.home&#125;/tomcat-7.0.42/lib/ext<span class="tag">&lt;/<span class="name">liferay.app.server.lib.global.dir</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">liferay.app.server.portal.dir</span>&gt;</span>$&#123;liferay.home&#125;/tomcat-7.0.42/webapps/ROOT<span class="tag">&lt;/<span class="name">liferay.app.server.portal.dir</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">liferay.version</span>&gt;</span>6.2.0-ga1<span class="tag">&lt;/<span class="name">liferay.version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">liferay.maven.plugin.version</span>&gt;</span>6.2.0-ga1<span class="tag">&lt;/<span class="name">liferay.maven.plugin.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">id</span>&gt;</span>liferay-plugin-repo<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">name</span>&gt;</span>Liferay Repo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repository.liferay.com/nexus/content/groups/liferay-ce/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>never<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">id</span>&gt;</span>liferay-repo<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">name</span>&gt;</span>Liferay Repo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repository.liferay.com/nexus/content/groups/liferay-ce/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行以下命令进行打包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure>
<p>此时在sample-portlet/target目录下就会生成<code>sample-portlet-1.0-SNAPSHOT.war</code>，再执行以下命令，就可以把生成的war包发布至<code>LP_HOME</code>的deploy目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn liferay:deploy</span><br></pre></td></tr></table></figure>
<p>启动<code>LP_HOME</code>下的tomcat，即可部署刚创建的portlet。</p>
<hr>
<p>全文完</p>
]]></content>
      <categories>
        <category>liferay</category>
      </categories>
      <tags>
        <tag>liferay</tag>
        <tag>portlet</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache ActiveMQ的安装与启动</title>
    <url>/2013/07/30/apache-activemq%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<p>Apache ActiveMQ是一个开源的消息中间件。下面介绍一下它的安装与启动。</p>
<ol>
<li>下载地址：<a href="http://activemq.apache.org/download.html" target="_blank" rel="noopener">http://activemq.apache.org/download.html</a></li>
<li>下载完成后解压，假设解压到的目录为%ACTIVEMQ_HOME%</li>
<li>命令行下切换到%ACTIVEMQ_HOME%/bin目录</li>
<li>启动Active MQ：windows下执行activemq，linux下执行./activemq start</li>
<li>访问 <a href="http://localhost:8161" target="_blank" rel="noopener">http://localhost:8161</a> ，用户名：admin，密码：admin</li>
<li>代码是向Apache ActiveMQ发送消息的地址是tcp://localhost:61616</li>
<li>停止Active MQ：windows下使用Ctrl+C，linux下执行./activemq stop</li>
</ol>
]]></content>
      <categories>
        <category>activemq</category>
      </categories>
      <tags>
        <tag>activemq</tag>
        <tag>jms</tag>
      </tags>
  </entry>
  <entry>
    <title>firefox插件</title>
    <url>/2013/06/03/firefox%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>我是一直叫插件，不过在现在的firefox里面叫做扩展。以下介绍下我自己用的插件。</p>
<ol>
<li>Adblock Plus。就像它的介绍那样“广告已成往事”。</li>
<li>FireGestures。firefox不像现在国产的那些浏览器，没有自带鼠标手势。这个插件就是一个鼠标手势插件。这种插件，越到一个顺手的就要一直用下去，因为不同的这种插件不同的手势代表的动作也不一样。</li>
<li>google-no-tracking-url。经常用google的必装插件，可以把google搜索结果的链接中移除google跟踪部分，让用户点击链接后直接访问页面，而不是再用再经过google跳转一样。</li>
</ol>
<p>以上是对于任何人都通用的。我再说几个特殊的。</p>
<ol>
<li>AutoProxy或FoxyProxy。翻墙于无形，撞墙已成往事。用代理的，必须是这两个中选一个。</li>
<li>Flagfox。可以显示当前网站所在服务器所在的国家的国旗。就是在网址栏右边显示个国旗。</li>
<li>VimFx。熟悉Vim的用户可以试试，可以很大程度上摆脱鼠标。</li>
<li>Youdao Translation。在浏览器选定一个词之后，要以点击右键用这个功能进行翻译。没有装翻译软件的，推荐这个。</li>
</ol>
]]></content>
      <categories>
        <category>firefox</category>
      </categories>
      <tags>
        <tag>firefox</tag>
        <tag>扩展</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql创建数据库及用户</title>
    <url>/2013/03/07/mysql%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8A%E7%94%A8%E6%88%B7/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database liferay character set utf8;</span><br><span class="line">create user &#39;liferay&#39;@&#39;%&#39; identified by &#39;liferay&#39;;</span><br><span class="line">grant all privileges on liferay.* to &#39;liferay&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>liferay解决上传文件到文档库格式限制</title>
    <url>/2012/06/27/liferay%E8%A7%A3%E5%86%B3%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0%E6%96%87%E6%A1%A3%E5%BA%93%E6%A0%BC%E5%BC%8F%E9%99%90%E5%88%B6/</url>
    <content><![CDATA[<p>默认情况下文档库不支持flv文件格式，只需要在portal-ext.properties文件中添加下配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dl.file.extensions=.ftl,.bmp,.css,.doc,.docx,.dot,.gif,.gz,.htm,.html,.jpg,.js,.lar,.mp3,.odb,.odf,.odg,.odp,.ods,.odt,.pdf,.png,.ppt,.pptx,.pps,.ppsx,.ppsm,.rtf,.swf,.sxc,.sxi,.sxw,.tar,.tiff,.tgz,.txt,.vsd,.xls,.xlsx,.xml,.zip,.jrxml,.flv</span><br></pre></td></tr></table></figure>
<p>其他的一些文件格式也能这样配置。</p>
]]></content>
      <categories>
        <category>liferay</category>
      </categories>
  </entry>
  <entry>
    <title>s:property标签显示html代码</title>
    <url>/2012/06/26/sproperty%E6%A0%87%E7%AD%BE%E6%98%BE%E7%A4%BAhtml%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p>如果一个属性的值是一段html代码，想在页面上被解析出来，只需要把s:property标签的escape属性设置为false。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">"html"</span> escape=<span class="string">"false"</span>/&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>struts</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下递归删除目录下所有csv文件</title>
    <url>/2012/03/04/linux%E4%B8%8B%E9%80%92%E5%BD%92%E5%88%A0%E9%99%A4%E7%9B%AE%E5%BD%95%E4%B8%8B%E6%89%80%E6%9C%89csv%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>原文地址：<a href="http://www.cnblogs.com/yuepeng/archive/2011/04/08/2009034.html" target="_blank" rel="noopener" title="linux下递归删除目录下所有exe文件">http://www.cnblogs.com/yuepeng/archive/2011/04/08/2009034.html</a></p>
<p>因为项目有一些每日都要发送的报文，时间长了硬盘就不够用了，所以要删除些。文件很多，主要还是因为在不同的目录里面，不方便一下全部删除。现找到这么一条语句来完成此功能，如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -name <span class="string">'*.csv'</span> -<span class="built_in">type</span> f -<span class="built_in">print</span> -<span class="built_in">exec</span> rm &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<ol>
<li>“.”    表示从当前目录开始递归查找</li>
<li>“-name ‘*.csv’ “根据名称来查找，要查找所有以.csv结尾的文件夹或者文件</li>
<li>“ -type f “查找的类型为文件</li>
<li>“-print” 输出查找的文件目录名</li>
<li>最主要的是是-exec了，-exec选项后边跟着一个所要执行的命令，表示将find出来的文件或目录执行该命令。exec选项后面跟随着所要执行的命令或脚本，然后是一对儿{}，一个空格和一个\，最后是一个分号</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>nutz中ioc的Json配置文件格式</title>
    <url>/2012/03/04/nutz%E4%B8%ADioc%E7%9A%84json%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<p>首发于<strong>iteye</strong>，链接：<a href="http://zhaiyz.iteye.com/blog/1428117" target="_blank" rel="noopener" title="nutz中ioc的Json配置文件格式">http://zhaiyz.iteye.com/blog/1428117</a><br>最近学习了下<a href="http://code.google.com/p/nutz/" target="_blank" rel="noopener">nutz</a> ，感觉很不错，入门第一步肯定是Hello world。我在学ioc的<a href="http://code.google.com/p/nutz/wiki/ioc_hello" target="_blank" rel="noopener">Hello world</a> 的时报了个警告：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">log4j: <span class="number">2012</span>-<span class="number">02</span>-<span class="number">27</span> <span class="number">23</span>:<span class="number">19</span>:<span class="number">38</span>,<span class="number">366</span> [main] WARN org.nutz.ioc.IocLoading - Using *Declared* ioc-define (without type or events)!!! Pls use Standard Ioc-Define!! Bean will define as:</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"singleton"</span> :<span class="keyword">true</span>,</span><br><span class="line">    <span class="string">"args"</span> :[],</span><br><span class="line">    <span class="string">"fields"</span> :[&#123;</span><br><span class="line">        <span class="string">"name"</span> :<span class="string">"name"</span>,</span><br><span class="line">        <span class="string">"value"</span> :&#123;</span><br><span class="line">        <span class="string">"type"</span> :<span class="string">"normal"</span>,</span><br><span class="line">        <span class="string">"value"</span> :<span class="string">"XiaoBai"</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="string">"name"</span> :<span class="string">"birthday"</span>,</span><br><span class="line">        <span class="string">"value"</span> :&#123;</span><br><span class="line">            <span class="string">"type"</span> :<span class="string">"normal"</span>,</span><br><span class="line">            <span class="string">"value"</span> :<span class="string">"2009-10-25 15:23:40"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>警告的意思是“使用了声明式的ioc定义，请使用标准的ioc定义”，那么什么是标准的ioc定义呢，<a href="http://code.google.com/p/nutz/wiki/ioc_hello" target="_blank" rel="noopener">Hello world</a> 的下一节<a href="http://code.google.com/p/nutz/wiki/ioc_inner_object" target="_blank" rel="noopener">匿名对象</a>就说了：如果配置文件解析成map后的键值仅包含“type、scope、singleton、fields、args、events”中的一个或几个字段，就是个标准的ioc定义。</p>
<a id="more"></a>
<p>报之上的警告是因为在ioc的配置文件中，使用了：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">xiaobai : &#123;</span><br><span class="line">    name : 'XiaoBai',</span><br><span class="line">    birthday : '2009-10-25 15:23:40'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，name和birthday就会被当作map的键值，它们不包含在“type、scope、singleton、fields、args、events”之内。</p>
<p>可以修改为：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">xiaobai : &#123;</span><br><span class="line">    fields : &#123;</span><br><span class="line">        name : 'XiaoBai',</span><br><span class="line">        birthday : '2009-10-25 15:23:40'</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样的话，fields就是会成为解析后map的键值，就不会报开始的那个警告。</p>
<p>我跟了下代码，在nutz-1.b.42.jar（我使用的是这个版本）org.nutz.ioc包里面的Iocs虚拟类中（应该作为工具类，防止 实例化才定义为虚拟类的，不过这种可以直接把其默认构造器私有化来实现，不用搞个虚拟类）有个方法就是用来检测是否为标准的ioc定义。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> zozoh(zozohtnt@gmail.com)</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> wendal(wendal1985@gmail.com)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Iocs</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String OBJFIELDS = <span class="string">"^(type|scope|singleton|fields|args|events)$"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isIocObject</span><span class="params">(Mapmap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry en : map.entrySet())</span><br><span class="line">            <span class="keyword">if</span> (!en.getKey().matches(OBJFIELDS))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 此处省略其他方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>意思很明白，和以上所说的一样，如果map的key不包含在”type|scope|singleton|fields|args|events”中就返回false。在同一个包下的IocLoading类的map2iobj方法有如下判断：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> IocObject <span class="title">map2iobj</span><span class="params">(Map map)</span> <span class="keyword">throws</span> ObjectLoadException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> IocObject iobj = <span class="keyword">new</span> IocObject();</span><br><span class="line">    <span class="keyword">if</span> (!isIocObject(map)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry en : map.entrySet()) &#123;</span><br><span class="line">            IocField ifld = <span class="keyword">new</span> IocField();</span><br><span class="line">            ifld.setName(en.getKey());</span><br><span class="line">            ifld.setValue(object2value(en.getValue()));</span><br><span class="line">            iobj.addField(ifld);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(log.isWarnEnabled()) <span class="comment">//TODO 移除这种兼容性</span></span><br><span class="line">            log.warn(<span class="string">"Using *Declared* ioc-define (without type or events)!!! Pls use Standard Ioc-Define!!"</span> +</span><br><span class="line"><span class="string">" Bean will define as:\n"</span>+Json.toJson(iobj));</span><br><span class="line">    &#125;<span class="comment">// 此处省略其他代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>开始的WARN就是这打出来的。</p>
<p>这个应该是历史遗留问题，作者也不推荐使用了，所以还是按标准的来。不过也相当简单，就那几个字段，照着配好就行。</p>
]]></content>
      <categories>
        <category>nutz</category>
      </categories>
      <tags>
        <tag>ioc</tag>
        <tag>json</tag>
        <tag>nutz</tag>
      </tags>
  </entry>
  <entry>
    <title>Xmanager连接CentOS</title>
    <url>/2011/10/24/xmanager%E8%BF%9E%E6%8E%A5centos/</url>
    <content><![CDATA[<p>服务器端配置（CentOS-5.7-i386）<br>1、保证“/etc/inittab”里面的默认启动项为“id:5:initdefault:”。<br>2、修改“/etc/gdm/custom.conf”里面的内容为：<br>[security]<br>AllowRemoteRoot=true<br>[xdmcp]<br>Enable=true<br>Port=177<br>3、重新启动桌面:gdm-restart</p>
<p>Xmanager配置（Xmanager 3.0 build 0152)<br>1、打开Xbrowser<br>2、新建一个“Xstart Session”<br>3、在“General”页，填写“Session”、“Host”、“Protocol”选择“SSH”，“User Name”、“Password”填写“Host”对应的用户名和密码，保存密码。“Execution Command”选择“7 GNOME”。<br>4、在“X Server”页，“Server Profile”选择“Xstart sample”<br>5、单击确定<br>6、双击打开刚配置好的“Xstart Session”</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>CentOS</tag>
        <tag>Xmanager</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式的实现</title>
    <url>/2011/07/23/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singletion</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singletion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Singletion INSTANCE = <span class="keyword">new</span> Singletion();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singletion <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> INSTANCE;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ol>
<li>把构造器定义成private类型，使得此类不能被其他类实例化。</li>
<li>调用时的代码：<code>Singletion singletion = Singletion.getInstance()</code></li>
<li>在分布式的系统中，因为会涉及到多个服务器，所以只是在每个服务器的JVM上有一个单独的实例，各个JVM上这个类的实例并不相同，所以在分布式的系统里面，慎用单例模式。</li>
</ol>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>singletion</tag>
        <tag>单例模式</tag>
      </tags>
  </entry>
  <entry>
    <title>编程或是重构时标记变量的命名</title>
    <url>/2011/07/20/%E7%BC%96%E7%A8%8B%E6%88%96%E6%98%AF%E9%87%8D%E6%9E%84%E6%97%B6%E6%A0%87%E8%AE%B0%E5%8F%98%E9%87%8F%E7%9A%84%E5%91%BD%E5%90%8D/</url>
    <content><![CDATA[<p>在编写代码的时候，经常遇到一些标记变量，如标志处理结果是否成功，处理的数据是否有错误，报文是否被发送等。之前写我一直是用flag来当作变量名，很显然这种方式并不能说明用来标记什么，根据我自己的经验，这种变量名应该以“is”或是“has”开始，以一个形容词，名词（名称复数）或是一个完成时的单词。这样的话，是否成功的变量名可以命名为“isSuccess”，处理的数据是否有错误可以用“hasError”或“hasErrors”来表示，报文是否被发送可以用“isSended”。其他的标记变量可以用相似的方法来命名。</p>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>重构</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 添加用户组、用户</title>
    <url>/2011/07/11/linux-%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E7%BB%84%E3%80%81%E7%94%A8%E6%88%B7/</url>
    <content><![CDATA[<ol>
<li>添加用户组 groupadd groupName</li>
<li>添加用户 adduser userName；修改密码 passwd userName</li>
<li>添加用户时指定用户组 useradd -g groupName userName</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>我使用的wordpress插件</title>
    <url>/2011/07/05/%E6%88%91%E4%BD%BF%E7%94%A8%E7%9A%84wordpress%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<ol>
<li>SEO类，虽然还不知道其具体原理，但知道这东西肯定有用。我用了两个SEO相关的插件，一个是All in One SEO Pack，另一个是Google XML Sitemaps。</li>
<li>广告类，这也用了两个一个是Post Layout，另一个是WP125，不过也可以用WP自带的小工具里面的文本来放些广告代码，我感觉这个更自然些。</li>
<li>编辑、评论类，因为是个程序员，文章里面少不了代码，所以必须用个代码高亮显示的插件，我用的是Syntax Highlighter。评论后会给被评论人发邮件的插件我用的是Comment Reply Notification，这个也是必须有的。还有一个就是在首页，分档页、搜索页等页面，只显示文章摘要的插wp-utf8-excerpt，这个虽然没达到我想要的那种效果，但也够用了。还有就是自带的一个插件，Akismet，过滤垃圾评论的。文章浏览次数统计插件WP-PostViews，这个也必须要用的。</li>
<li>Easy Favicon，这个算是个美化插件吧，就是让网站在浏览器里面有个小图标。</li>
<li>数据库备份插件，WordPress Database Backup，这个很好用，很容易用，也必用。</li>
</ol>
]]></content>
      <categories>
        <category>wordpress</category>
      </categories>
      <tags>
        <tag>插件</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>再一次开始</title>
    <url>/2011/07/03/%E5%86%8D%E4%B8%80%E6%AC%A1%E5%BC%80%E5%A7%8B/</url>
    <content><![CDATA[<p>在淘宝上买了个空间，店主又帮忙注册了个域名，都在国外的方便，不用备案什么的。搞了好几天的空间，装了不少插件，还修改了一些样式，差不多可以用了。以后就在这里写东西了。</p>
]]></content>
      <categories>
        <category>默认分类</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
</search>
